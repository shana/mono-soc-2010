Index: mono/metadata/sgen-gc.c
===================================================================
--- mono/metadata/sgen-gc.c	(revision 157988)
+++ mono/metadata/sgen-gc.c	(working copy)
@@ -199,19 +199,15 @@
 #include "utils/mono-time.h"
 #include "utils/mono-semaphore.h"
 #include "utils/mono-counters.h"
+#include "mini/mini.h"
+#include "io-layer/wapi.h"
 
+#if defined(MONO_GC_SAFE_POINTS) && !defined(WAPI_ATOMIC_ASM)
+#error InterlockedCompareExchange needed for safe points.
+#endif
+
 #include <mono/utils/memcheck.h>
 
-#define OPDEF(a,b,c,d,e,f,g,h,i,j) \
-	a = i,
-
-enum {
-#include "mono/cil/opcode.def"
-	CEE_LAST
-};
-
-#undef OPDEF
-
 /*
  * ######################################################################
  * ########  Types and constants used by the GC.
@@ -398,6 +394,18 @@
 
 #define SIZEOF_GC_MEM_SECTION	((sizeof (GCMemSection) + 7) & ~7)
 
+#ifdef MONO_GC_SAFE_POINTS
+
+void *gc_safe_point_map = NULL;
+
+GPtrArray *bl_methods = NULL;
+
+static void gc_safe_points_trigger_request (void);
+static void gc_safe_points_dissolve_request (void);
+static void safe_points_setup (void);
+
+#endif
+
 /* large object space struct: 64+ KB */
 /* we could make this limit much smaller to avoid memcpy copy
  * and potentially have more room in the GC descriptor: need to measure
@@ -877,8 +885,28 @@
 	gpointer *store_remset_buffer;
 	long store_remset_buffer_index;
 #endif
+#ifdef MONO_GC_SAFE_POINTS
+	volatile int safe_point_info; /* TODO Is volatile required? */
+#endif
 };
 
+#ifdef MONO_GC_SAFE_POINTS
+enum {
+	SAFE_POINT_THREAD_RUNNING = 0,
+	SAFE_POINT_THREAD_PARKED = 1,
+	SAFE_POINT_THREAD_MANAGED = 2,
+	SAFE_POINT_THREAD_MANAGED_PARKED = 3,
+	SAFE_POINT_THREAD_UNMANAGED = 4,
+	SAFE_POINT_THREAD_UNMANAGED_PARKED = 5
+};
+
+#ifdef MONO_GC_SAFE_POINTS_STATS
+int safe_points_encountered, total_threads_stopped;
+#endif
+
+#endif // MONO_GC_SAFE_POINTS
+
+
 #ifdef HAVE_KW_THREAD
 #define TLAB_ACCESS_INIT
 #define TLAB_START	tlab_start
@@ -5420,19 +5448,17 @@
 
 /* LOCKING: assumes the GC lock is held (by the stopping thread) */
 static void
-suspend_handler (int sig, siginfo_t *siginfo, void *context)
+prepare_thread_for_gc (void *context, MonoDomain *domain, gpointer ip)
 {
 	SgenThreadInfo *info;
-	pthread_t id;
 	int stop_count;
 	int old_errno = errno;
 	gpointer regs [ARCH_NUM_REGS];
 	gpointer stack_start;
 
-	id = pthread_self ();
-	info = thread_info_lookup (id);
-	info->stopped_domain = mono_domain_get ();
-	info->stopped_ip = (gpointer) ARCH_SIGCTX_IP (context);
+	info = thread_info_lookup (ARCH_GET_THREAD ());
+	info->stopped_domain = domain;
+	info->stopped_ip = ip;
 	stop_count = global_stop_count;
 	/* duplicate signal */
 	if (0 && info->stop_count == stop_count) {
@@ -5477,7 +5503,28 @@
 	errno = old_errno;
 }
 
+/* LOCKING: assumes the GC lock is held (by the stopping thread) */
 static void
+suspend_handler (int sig, siginfo_t *siginfo, void *context)
+{
+	MonoDomain *domain = mono_domain_get ();
+	gpointer ip = (gpointer) ARCH_SIGCTX_IP (context);
+#ifdef MONO_GC_SAFE_POINTS
+	SgenThreadInfo *info = thread_info_lookup (ARCH_GET_THREAD ());
+	InterlockedCompareExchange (&info->safe_point_info, SAFE_POINT_THREAD_UNMANAGED_PARKED, SAFE_POINT_THREAD_RUNNING);
+	if (info->safe_point_info != SAFE_POINT_THREAD_UNMANAGED_PARKED) {
+		DEBUG (4, fprintf (gc_debug_file, "Not suspending %p, %p from a suspend handler hit.\n", info, info->id));
+		return;
+	}
+#ifdef MONO_GC_SAFE_POINTS_STATS
+	total_threads_stopped++;
+#endif
+	DEBUG (4, fprintf (gc_debug_file, "Suspending %p, %p from a suspend handler hit.\n", info, info->id));
+#endif // MONO_GC_SAFE_POINTS
+	prepare_thread_for_gc (context, domain, ip);
+}
+
+static void
 restart_handler (int sig)
 {
 	SgenThreadInfo *info;
@@ -5488,6 +5535,10 @@
 	DEBUG (4, fprintf (gc_debug_file, "Restart handler in %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 
 	errno = old_errno;
+
+#ifdef MONO_GC_SAFE_POINTS_STATS
+	fprintf (gc_debug_file, "Safe point stats - %d / %d\n", safe_points_encountered, total_threads_stopped);
+#endif
 }
 
 static void
@@ -5505,6 +5556,24 @@
 static TV_DECLARE (stop_world_time);
 static unsigned long max_pause_usec = 0;
 
+#ifdef MONO_GC_SAFE_POINTS
+static void
+reset_safe_point_flags ()
+{
+	int i;
+	SgenThreadInfo *info;
+	for (i = 0; i < THREAD_HASH_SIZE; ++i)
+		for (info = thread_table [i]; info; info = info->next)
+			info->safe_point_info = 0;
+}
+#endif
+
+#ifdef MONO_GC_SAFE_POINTS
+/* Number of micro-seconds the world-stopping threads waits for the other
+ * threads reach a GC safe point. This may not actually be required. */
+#define SLEEP_TIME_THREADS 20
+#endif
+
 /* LOCKING: assumes the GC lock is held */
 static int
 stop_world (void)
@@ -5515,10 +5584,25 @@
 
 	update_current_thread_stack (&count);
 
+#ifdef MONO_GC_SAFE_POINTS_STATS
+	safe_points_encountered = 0;
+	total_threads_stopped = 0;
+#endif
+
 	global_stop_count++;
 	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, thread_info_lookup (ARCH_GET_THREAD ()), (gpointer)ARCH_GET_THREAD ()));
 	TV_GETTIME (stop_world_time);
+#ifdef MONO_GC_SAFE_POINTS
+	reset_safe_point_flags ();
+	gc_safe_points_trigger_request ();
+#ifdef SLEEP_TIME_THREADS
+	g_usleep (SLEEP_TIME_THREADS); /* TODO Is this needed? Should it be increased / decreased? */
+#endif
+#endif
 	count = thread_handshake (suspend_signal_num);
+#ifdef MONO_GC_SAFE_POINTS
+	gc_safe_points_dissolve_request ();
+#endif
 	count -= restart_threads_until_none_in_managed_allocator ();
 	g_assert (count >= 0);
 	DEBUG (3, fprintf (gc_debug_file, "world stopped %d thread(s)\n", count));
@@ -7195,6 +7279,10 @@
 	suspend_ack_semaphore_ptr = &suspend_ack_semaphore;
 	MONO_SEM_INIT (&suspend_ack_semaphore, 0);
 
+#ifdef MONO_GC_SAFE_POINTS
+	safe_points_setup ();
+#endif
+
 	sigfillset (&sinfo.sa_mask);
 	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
 	sinfo.sa_sigaction = suspend_handler;
@@ -7601,8 +7689,12 @@
 
 	mono_loader_lock ();
 	res = alloc_method_cache [atype];
-	if (!res)
-		res = alloc_method_cache [atype] = create_allocator (atype);
+	if (!res) {
+ 		res = alloc_method_cache [atype] = create_allocator (atype);
+#ifdef MONO_GC_SAFE_POINTS
+		mono_gc_blacklist_method_for_safe_pts (res);
+#endif
+	}
 	mono_loader_unlock ();
 	return res;
 #else
@@ -7806,11 +7898,90 @@
 		/* double-checked locking */
 		mono_memory_barrier ();
 		write_barrier_method = res;
+#ifdef MONO_GC_SAFE_POINTS
+		mono_gc_blacklist_method_for_safe_pts (write_barrier_method);
+#endif
 	}
 	mono_loader_unlock ();
 
 	return write_barrier_method;
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+
+static void
+safe_points_setup (void)
+{ 
+	void *tmp_map;
+#ifdef MONO_GC_SAFE_POINTS_METHOD_DEBUG
+	gchar *list_track = getenv ("MONO_GC_SAFE_POINT_TRACK_METHOD");
+#endif
+	if (gc_safe_point_map) {
+		return;
+	}
+
+	tmp_map = mono_valloc (NULL, mono_pagesize (), MONO_MMAP_READ);
+	g_assert (tmp_map);
+
+#ifdef MONO_GC_SAFE_POINTS_METHOD_DEBUG
+	if (list_track)
+		track_methods = g_strsplit (list_track, ",", -1);
+#endif
+
+	mono_loader_lock ();
+
+	if (!bl_methods)
+		bl_methods = g_ptr_array_new ();
+
+	if (gc_safe_point_map) {
+		mono_vfree (tmp_map, mono_pagesize ());
+	} else {
+		gc_safe_point_map = tmp_map;
+	}
+
+	mono_loader_unlock ();
+}
+
+static void
+gc_safe_points_trigger_request (void)
+{
+	mono_mprotect (gc_safe_point_map, mono_pagesize (), MONO_MMAP_NONE);
+}
+
+static void
+gc_safe_points_dissolve_request(void)
+{
+	mono_mprotect (gc_safe_point_map, mono_pagesize (), MONO_MMAP_READ);
+}
+
+void
+mono_gc_blacklist_method_for_safe_pts (MonoMethod *method)
+{
+	int i;
+	for (i = 0; i < bl_methods->len; i++)
+		if (g_ptr_array_index (bl_methods, i) == method)
+			return;
+	g_ptr_array_add (bl_methods, method);
+}
+
+void
+mono_gc_hit_safe_point (void *context, MonoDomain *domain, gpointer ip)
+{
+	SgenThreadInfo *info = thread_info_lookup (ARCH_GET_THREAD ());
+	InterlockedCompareExchange (&info->safe_point_info, SAFE_POINT_THREAD_MANAGED_PARKED, SAFE_POINT_THREAD_RUNNING);
+	if (info->safe_point_info == SAFE_POINT_THREAD_MANAGED_PARKED) {
+#ifdef MONO_GC_SAFE_POINTS_STATS
+		safe_points_encountered++;
+		total_threads_stopped++;
+#endif
+		DEBUG (4, fprintf (gc_debug_file, "Suspending %p, %p from a safe point hit.\n", info, info->id));
+		prepare_thread_for_gc (context, domain, ip);
+	} else {
+		DEBUG (4, fprintf (gc_debug_file, "Not suspending %p, %p from a safe point hit.\n", info, info->id));
+	}
+}
+
+#endif // MONO_GC_SAFE_POINTS
+
 #endif /* HAVE_SGEN_GC */
 
Index: mono/metadata/sgen-gc.h
===================================================================
--- mono/metadata/sgen-gc.h	(revision 157988)
+++ mono/metadata/sgen-gc.h	(working copy)
@@ -46,5 +46,39 @@
 /* we intercept pthread_create calls to know which threads exist */
 #define USE_PTHREAD_INTERCEPT 1
 
+/* Define this to use GC safe points. */
+#define MONO_GC_SAFE_POINTS 1
+
+/* Define this to maintain and print stats about the safe points. */
+//#define MONO_GC_SAFE_POINTS_STATS 1
+
+#ifdef MONO_GC_SAFE_POINTS
+
+/**
+ * Called from the main SIGSEGV signal handler when a safe point causes a
+ * segmentation fault.
+ */
+void mono_gc_hit_safe_point (void *context, MonoDomain *domain, gpointer ip);
+
+/**
+ * This is used in mini/mini.c to check if the SIGSEGV was (intentionally) caused
+ * by a safe point.
+ */
+extern void *gc_safe_point_map;
+
+/**
+ * Called to blacklist methods which must not have gc-safe points inside them,
+ * either for correctness (viz. wbarrier) or efficiency (small methods which
+ * return quickly).
+ * 
+ * Defined in sgen-gc.c (otherwise libmonoruntime does not build).
+ *
+ * TODO Register the 'small methods which return quickly' from various places 
+ * in codebase.
+ */
+void mono_gc_blacklist_method_for_safe_pts (MonoMethod *method);
+
+#endif // MONO_GC_SAFE_POINTS
+
 #endif /* __MONO_SGENGC_H__ */
 
Index: mono/mini/method-to-ir.c
===================================================================
--- mono/mini/method-to-ir.c	(revision 157988)
+++ mono/mini/method-to-ir.c	(working copy)
@@ -52,6 +52,10 @@
 #include <mono/utils/mono-compiler.h>
 #include <mono/metadata/mono-basic-block.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
 #include "mini.h"
 #include "trace.h"
 
@@ -101,6 +105,33 @@
 /* Determine whenever 'ins' represents a load of the 'this' argument */
 #define MONO_CHECK_THIS(ins) (mono_method_signature (cfg->method)->hasthis && ((ins)->opcode == OP_MOVE) && ((ins)->sreg1 == cfg->args [0]->dreg))
 
+#ifdef MONO_GC_SAFE_POINTS
+
+#define INSERT_GC_SAFE_POINT \
+	do {\
+		if (!cfg->compile_aot && insert_safe_points) {\
+			int ptr_reg, deref_reg; \
+			ptr_reg = alloc_preg (cfg); \
+			MONO_EMIT_NEW_PCONST (cfg, ptr_reg, gc_safe_point_map); \
+			deref_reg = alloc_preg (cfg); \
+			MONO_EMIT_NEW_LOAD_MEMBASE (cfg, deref_reg, ptr_reg, 0); \
+		} \
+	} while (0)
+
+#define INSERT_GC_SAFE_POINT_COND(x) \
+	do {\
+		if ((x)) { \
+			INSERT_GC_SAFE_POINT; \
+		} \
+	} while (0)
+
+#else
+
+#define INSERT_GC_SAFE_POINT
+#define INSERT_GC_SAFE_POINT_COND(x)
+
+#endif
+
 static int ldind_to_load_membase (int opcode);
 static int stind_to_store_membase (int opcode);
 
@@ -5091,6 +5122,25 @@
 	return FALSE;
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+
+extern GPtrArray *bl_methods;
+
+static gboolean
+method_blacklisted_for_gc_safe_pts (MonoMethod *method)
+{
+	int i;
+	if (!bl_methods)
+		return FALSE;
+	for (i = 0; i < bl_methods -> len; i++) {
+		if (g_ptr_array_index (bl_methods, i) == method)
+			return TRUE;
+	}
+	return FALSE;
+}
+
+#endif
+
 /*
  * mono_method_to_ir:
  *
@@ -5130,6 +5180,10 @@
 	int context_used;
 	gboolean init_locals, seq_points, skip_dead_blocks;
 
+#ifdef MONO_GC_SAFE_POINTS
+	gboolean insert_safe_points = !method_blacklisted_for_gc_safe_pts(method);
+#endif
+
 	/* serialization and xdomain stuff may need access to private fields and methods */
 	dont_verify = method->klass->image->assembly->corlib_internal? TRUE: FALSE;
 	dont_verify |= method->wrapper_type == MONO_WRAPPER_XDOMAIN_INVOKE;
@@ -5998,6 +6052,8 @@
 				if (method->dynamic && fsig->pinvoke) {
 					MonoInst *args [3];
 
+					INSERT_GC_SAFE_POINT;
+
 					/*
 					 * This is a call through a function pointer using a pinvoke
 					 * signature. Have to create a wrapper and call that instead.
@@ -6603,6 +6659,7 @@
 			break;
 		}
 		case CEE_RET:
+			INSERT_GC_SAFE_POINT;
 			if (cfg->method != method) {
 				/* return from inlined method */
 				/* 
@@ -6680,6 +6737,7 @@
 			break;
 		case CEE_BR_S:
 			CHECK_OPSIZE (2);
+			INSERT_GC_SAFE_POINT_COND((signed char) (*(ip + 1)) < 0);
 			MONO_INST_NEW (cfg, ins, OP_BR);
 			ip++;
 			target = ip + 1 + (signed char)(*ip);
@@ -6708,6 +6766,7 @@
 		case CEE_BLT_UN_S:
 			CHECK_OPSIZE (2);
 			CHECK_STACK (2);
+			INSERT_GC_SAFE_POINT_COND(*(signed char*) (ip + 1) < 0);
 			MONO_INST_NEW (cfg, ins, *ip + BIG_BRANCH_OFFSET);
 			ip++;
 			target = ip + 1 + *(signed char*)ip;
@@ -6734,6 +6793,7 @@
 				CHECK_UNVERIFIABLE (cfg);
 			}
 
+			INSERT_GC_SAFE_POINT_COND(target < ip);
 			MONO_ADD_INS (bblock, ins);
 
 			start_new_bblock = 1;
@@ -6756,6 +6816,8 @@
 			target = ip + opsize + (is_short ? *(signed char*)ip : (gint32)read32(ip));
 			ip += opsize;
 
+			INSERT_GC_SAFE_POINT_COND(target < ip);
+
 			sp--;
 
 			GET_BBLOCK (cfg, tblock, target);
@@ -6810,12 +6872,15 @@
 		case CEE_BGE_UN:
 		case CEE_BGT_UN:
 		case CEE_BLE_UN:
-		case CEE_BLT_UN:
+		case CEE_BLT_UN: {
+			gint32 delta;
 			CHECK_OPSIZE (5);
 			CHECK_STACK (2);
+			delta = (gint32) read32 (ip + 1);
+			INSERT_GC_SAFE_POINT_COND(delta < 0);
 			MONO_INST_NEW (cfg, ins, *ip);
 			ip++;
-			target = ip + 4 + (gint32)read32(ip);
+			target = ip + 4 + delta;
 			ip += 4;
 
 			ADD_BINCOND (NULL);
@@ -6823,6 +6888,7 @@
 			sp = stack_start;
 			inline_costs += BRANCH_COST;
 			break;
+		}
 		case CEE_SWITCH: {
 			MonoInst *src1;
 			MonoBasicBlock **targets;
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 157988)
+++ mono/mini/mini.c	(working copy)
@@ -52,6 +52,10 @@
 #include <mono/utils/mono-mmap.h>
 #include <mono/utils/dtrace.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
 #include "mini.h"
 #include "tasklets.h"
 #include <string.h>
@@ -5346,6 +5350,14 @@
 
 	GET_CONTEXT;
 
+#ifdef MONO_GC_SAFE_POINTS
+	if (info->si_addr == gc_safe_point_map) {
+		mono_gc_hit_safe_point (context, mono_domain_get (),
+				mono_arch_ip_from_context (ctx));
+		return;
+	}
+#endif
+
 #if defined(MONO_ARCH_SOFT_DEBUG_SUPPORTED) && defined(HAVE_SIG_INFO)
 	if (mono_arch_is_single_step_event (info, ctx)) {
 		mono_debugger_agent_single_step_event (ctx);
@@ -5476,7 +5488,7 @@
 {
 	char *options = getenv ("MONO_DEBUG");
 	gchar **args, **ptr;
-	
+
 	if (!options)
 		return;
 

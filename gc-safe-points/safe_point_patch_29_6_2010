Index: mono/metadata/sgen-gc.c
===================================================================
--- mono/metadata/sgen-gc.c	(revision 159586)
+++ mono/metadata/sgen-gc.c	(working copy)
@@ -5209,8 +5209,14 @@
 
 #if USE_SIGNAL_BASED_START_STOP_WORLD
 
-static MonoSemType suspend_ack_semaphore;
-static MonoSemType *suspend_ack_semaphore_ptr;
+static MonoSemType ack_semaphore_a;
+static MonoSemType *ack_semaphore_a_ptr;
+
+#ifdef MONO_GC_SAFE_POINTS
+static MonoSemType ack_semaphore_b;
+static MonoSemType *ack_semaphore_b_ptr;
+#endif
+
 static unsigned int global_stop_count = 0;
 
 static sigset_t suspend_signal_mask;
@@ -5246,8 +5252,6 @@
 	g_assert (info->stack_start >= info->stack_start_limit && info->stack_start < info->stack_end);
 	ARCH_STORE_REGS (ptr);
 	info->stopped_regs = ptr;
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, NULL);
 }
 
 /*
@@ -5265,8 +5269,10 @@
 #endif
 #endif
 
+#ifndef MONO_GC_SAFE_POINTS
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip);
+#endif
 
 void
 mono_sgen_wait_for_suspend_ack (int count)
@@ -5274,7 +5280,7 @@
 	int i, result;
 
 	for (i = 0; i < count; ++i) {
-		while ((result = MONO_SEM_WAIT (suspend_ack_semaphore_ptr)) != 0) {
+		while ((result = MONO_SEM_WAIT (ack_semaphore_a_ptr)) != 0) {
 			if (errno != EINTR) {
 				g_error ("sem_wait ()");
 			}
@@ -5282,6 +5288,8 @@
 	}
 }
 
+#ifndef MONO_GC_SAFE_POINTS
+
 static int
 restart_threads_until_none_in_managed_allocator (void)
 {
@@ -5371,50 +5379,41 @@
 	return num_threads_died;
 }
 
-/* LOCKING: assumes the GC lock is held (by the stopping thread) */
-static void
-suspend_handler (int sig, siginfo_t *siginfo, void *context)
+#endif /* ! MONO_GC_SAFE_POINTS */
+
+void
+mono_sgen_thread_ready_to_suspend (gpointer sigctx)
 {
-	SgenThreadInfo *info;
-	pthread_t id;
-	int stop_count;
-	int old_errno = errno;
+	SgenThreadInfo *info = mono_sgen_thread_info_lookup (ARCH_GET_THREAD ());
 	gpointer regs [ARCH_NUM_REGS];
 	gpointer stack_start;
+	int stop_count = global_stop_count;
+	int old_errno = errno;
 
-	id = pthread_self ();
-	info = mono_sgen_thread_info_lookup (id);
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_domain = mono_domain_get ();
-	info->stopped_ip = (gpointer) ARCH_SIGCTX_IP (context);
-	stop_count = global_stop_count;
-	/* duplicate signal */
-	if (0 && info->stop_count == stop_count) {
-		errno = old_errno;
-		return;
-	}
+	info->stopped_ip = ARCH_SIGCTX_IP (sigctx);
+#endif
+
 #ifdef HAVE_KW_THREAD
 	/* update the remset info in the thread data structure */
 	info->remset = remembered_set;
 #endif
-	stack_start = (char*) ARCH_SIGCTX_SP (context) - REDZONE_SIZE;
+	stack_start = (char*) ARCH_SIGCTX_SP (sigctx) - REDZONE_SIZE;
 	/* If stack_start is not within the limits, then don't set it
 	   in info and we will be restarted. */
 	if (stack_start >= info->stack_start_limit && info->stack_start <= info->stack_end) {
 		info->stack_start = stack_start;
 
-		ARCH_COPY_SIGCTX_REGS (regs, context);
+		ARCH_COPY_SIGCTX_REGS (regs, sigctx);
 		info->stopped_regs = regs;
 	} else {
 		g_assert (!info->stack_start);
 	}
 
-	/* Notify the JIT */
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, context);
-
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
 	info->stop_count = stop_count;
 
 	/* wait until we receive the restart signal */
@@ -5423,14 +5422,33 @@
 		sigsuspend (&suspend_signal_mask);
 	} while (info->signal != restart_signal_num);
 
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_mutator_restart_func (info->runtime_data);
+#endif
+
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
 
 	errno = old_errno;
 }
 
+/* LOCKING: assumes the GC lock is held (by the stopping thread) */
 static void
+suspend_handler (int sig, siginfo_t *siginfo, void *sigctx)
+{
+#ifdef MONO_GC_SAFE_POINTS
+	SgenThreadInfo *info = mono_sgen_thread_info_lookup (ARCH_GET_THREAD ());
+	gc_callbacks.thread_mutator_suspend_func (info->runtime_data, sigctx);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
+	MONO_SEM_WAIT (ack_semaphore_b_ptr);
+	gc_callbacks.thread_mutator_suspend_now (info->runtime_data);
+#else
+	mono_sgen_thread_ready_to_suspend (sigctx);
+#endif
+}
+
+static void
 restart_handler (int sig)
 {
 	SgenThreadInfo *info;
@@ -5462,17 +5480,39 @@
 static int
 stop_world (void)
 {
-	int count;
+	int count, i;
+	SgenThreadInfo *info;
+	ARCH_THREAD_TYPE me = ARCH_GET_THREAD ();
 
 	acquire_gc_locks ();
 
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_collector_initiate_parking_func ();
+#endif
+
 	update_current_thread_stack (&count);
 
 	global_stop_count++;
-	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, mono_sgen_thread_info_lookup (ARCH_GET_THREAD ()), (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, mono_sgen_thread_info_lookup (me), (gpointer) me));
 	TV_GETTIME (stop_world_time);
 	count = mono_sgen_thread_handshake (suspend_signal_num);
+#ifdef MONO_GC_SAFE_POINTS
+
+	/* Patch the required places. */
+	for (i = 0; i < THREAD_HASH_SIZE; i++)
+		for (info = thread_table [i]; info; info = info->next)
+			if (!ARCH_THREAD_EQUALS (info->id, me))
+				gc_callbacks.thread_collector_suspend_func (info->runtime_data);
+
+	/* Signal the waiting threads to start. */
+	for (i = 0; i < count; i++)
+		MONO_SEM_POST (ack_semaphore_b_ptr);
+
+	mono_sgen_wait_for_suspend_ack (count);
+	gc_callbacks.thread_collector_dissolve_parking_func ();
+#else
 	count -= restart_threads_until_none_in_managed_allocator ();
+#endif
 	g_assert (count >= 0);
 	DEBUG (3, fprintf (gc_debug_file, "world stopped %d thread(s)\n", count));
 	return count;
@@ -5484,6 +5524,7 @@
 {
 	int count, i;
 	SgenThreadInfo *info;
+	ARCH_THREAD_TYPE me = ARCH_GET_THREAD ();
 	TV_DECLARE (end_sw);
 	unsigned long usec;
 
@@ -5496,6 +5537,10 @@
 	}
 	for (i = 0; i < THREAD_HASH_SIZE; ++i) {
 		for (info = thread_table [i]; info; info = info->next) {
+#ifdef MONO_GC_SAFE_POINTS
+			if (!ARCH_THREAD_EQUALS (info->id, me))
+				gc_callbacks.thread_collector_restart_func (info->runtime_data);
+#endif
 			info->stack_start = NULL;
 			info->stopped_regs = NULL;
 		}
@@ -5563,9 +5608,7 @@
 				continue;
 			}
 			DEBUG (3, fprintf (gc_debug_file, "Scanning thread %p, range: %p-%p, size: %td, pinned=%d\n", info, info->stack_start, info->stack_end, (char*)info->stack_end - (char*)info->stack_start, next_pin_slot));
-			if (gc_callbacks.thread_mark_func && !conservative_stack_mark)
-				gc_callbacks.thread_mark_func (info->runtime_data, info->stack_start, info->stack_end, precise);
-			else if (!precise)
+			if (!precise)
 				conservatively_pin_objects_from (info->stack_start, info->stack_end, start_nursery, end_nursery, PIN_TYPE_STACK);
 
 			if (!precise)
@@ -5986,8 +6029,10 @@
 	info->tlab_real_end_addr = &TLAB_REAL_END;
 	info->store_remset_buffer_addr = &STORE_REMSET_BUFFER;
 	info->store_remset_buffer_index_addr = &STORE_REMSET_BUFFER_INDEX;
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_ip = NULL;
 	info->stopped_domain = NULL;
+#endif
 	info->stopped_regs = NULL;
 
 	binary_protocol_thread_register ((gpointer)info->id);
@@ -6076,6 +6121,9 @@
 		prev = p;
 		p = p->next;
 	}
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_detach_func (p->runtime_data);
+#endif
 	if (prev == NULL) {
 		thread_table [hash] = p->next;
 	} else {
@@ -7181,8 +7229,12 @@
 		g_strfreev (opts);
 	}
 
-	suspend_ack_semaphore_ptr = &suspend_ack_semaphore;
-	MONO_SEM_INIT (&suspend_ack_semaphore, 0);
+	ack_semaphore_a_ptr = &ack_semaphore_a;
+	MONO_SEM_INIT (&ack_semaphore_a, 0);
+#ifdef MONO_GC_SAFE_POINTS
+	ack_semaphore_b_ptr = &ack_semaphore_b;
+	MONO_SEM_INIT (&ack_semaphore_b, 0);
+#endif
 
 	sigfillset (&sinfo.sa_mask);
 	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
@@ -7482,28 +7534,36 @@
 static MonoMethod* alloc_method_cache [ATYPE_NUM];
 static MonoMethod *write_barrier_method;
 
+gboolean
+mono_sgen_is_inconsistent_method (MonoMethod *method)
+{
+	int i;
+	if (method == write_barrier_method)
+		return TRUE;
+	for (i = 0; i < ATYPE_NUM; ++i)
+		if (method == alloc_method_cache [i])
+			return TRUE;
+	return FALSE;
+}
+
+#ifndef MONO_GC_SAFE_POINTS
+
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip)
 {
 	MonoJitInfo *ji;
-	MonoMethod *method;
-	int i;
 
 	if (!ip || !domain)
 		return FALSE;
 	ji = mono_jit_info_table_find (domain, ip);
 	if (!ji)
 		return FALSE;
-	method = ji->method;
 
-	if (method == write_barrier_method)
-		return TRUE;
-	for (i = 0; i < ATYPE_NUM; ++i)
-		if (method == alloc_method_cache [i])
-			return TRUE;
-	return FALSE;
+	return mono_sgen_is_inconsistent_method (ji->method);
 }
 
+#endif
+
 /*
  * Generate an allocator method implementing the fast path of mono_gc_alloc_obj ().
  * The signature of the called method is:
Index: mono/metadata/sgen-gc.h
===================================================================
--- mono/metadata/sgen-gc.h	(revision 159586)
+++ mono/metadata/sgen-gc.h	(working copy)
@@ -29,8 +29,9 @@
 #include <glib.h>
 #include <pthread.h>
 #include <sys/signal.h>
-#include "utils/mono-compiler.h"
-#include "metadata/class-internals.h"
+#include <mono/utils/mono-compiler.h>
+#include <mono/utils/mono-semaphore.h>
+#include <mono/metadata/class-internals.h>
 
 #define THREAD_HASH_SIZE 11
 
@@ -44,6 +45,12 @@
 typedef guint64 mword;
 #endif
 
+/* Define this to use GC safe points. */
+#define MONO_GC_SAFE_POINTS 1
+
+/* #define DEBUG_SAFE_POINTS(...) fprintf (stderr, __VA_ARGS__); */
+#define DEBUG_SAFE_POINTS(...)
+
 /* for use with write barriers */
 typedef struct _RememberedSet RememberedSet;
 struct _RememberedSet {
@@ -74,8 +81,10 @@
 	long *store_remset_buffer_index_addr;
 	RememberedSet *remset;
 	gpointer runtime_data;
+#ifndef MONO_GC_SAFE_POINTS
 	gpointer stopped_ip;	/* only valid if the thread is stopped */
 	MonoDomain *stopped_domain; /* ditto */
+#endif
 	gpointer *stopped_regs;	    /* ditto */
 #ifndef HAVE_KW_THREAD
 	char *tlab_start;
@@ -87,12 +96,14 @@
 #endif
 };
 
+gboolean mono_sgen_is_inconsistent_method (MonoMethod *);
+
 #ifdef __APPLE__
-static int suspend_signal_num = SIGXFSZ;
+const static int suspend_signal_num = SIGXFSZ;
 #else
-static int suspend_signal_num = SIGPWR;
+const static int suspend_signal_num = SIGPWR;
 #endif
-static int restart_signal_num = SIGXCPU;
+const static int restart_signal_num = SIGXCPU;
 
 /*
  * Recursion is not allowed for the thread lock.
Index: mono/metadata/gc-internal.h
===================================================================
--- mono/metadata/gc-internal.h	(revision 159586)
+++ mono/metadata/gc-internal.h	(working copy)
@@ -176,9 +176,38 @@
 /* helper for the managed alloc support */
 MonoString *mono_string_alloc (int length) MONO_INTERNAL;
 
+/*
+ * Called to signify that the current thread is ready to be suspended for 
+ * collection (i.e. is at a consistent state).
+ */
+void mono_sgen_thread_ready_to_suspend (gpointer sigctx) MONO_INTERNAL;
+
 /* 
  * Functions supplied by the runtime and called by the GC. Currently only used
- * by SGEN.
+ * by SGen.
+ *
+ * When stopping the world, the callbacks need to be invoked thus:
+ *
+ * thread_collector_initiate_parking_func: In the beginning of the stop_world routine.
+ *
+ * thread_mutator_suspend_func: From all the mutator threads, once the above has been 
+ * executed.
+ *
+ * thread_collector_suspend_func: From the collector thread, once the above has been
+ * executed for that particular thread.
+ *
+ * thread_mutator_suspend_now: Suspends the mutator from which this is called. This may
+ * either be directly through a call to mono_sgen_thread_ready_to_suspend or through 
+ * an indirect call to mono_sgen_thread_ready_to_suspend once the thread is at a safe point.
+ *
+ * thread_collector_dissolve_parking_func: From the collector thread, once all threads have
+ * stopped.
+ *
+ * thread_collector_restart_func: From the collector thread, once for each thread, when the
+ * collection is over.
+ *
+ * thread_mutator_restart_func: From the mutator thread, before just before restarting.
+ *
  */
 typedef struct {
 	/* 
@@ -186,23 +215,23 @@
 	 * needed by the other functions.
 	 */
 	gpointer (*thread_attach_func) (void);
-	/* FIXME: Add a cleanup function too */
-	/* 
-	 * Function called from every thread when suspending for GC. It can save
-	 * data needed for marking from thread stacks. user_data is the data returned 
-	 * by attach_func. This might called with GC locks held and the word stopped,
-	 * so it shouldn't do any synchronization etc.
+
+	void (*thread_collector_initiate_parking_func) (void);
+
+	void (*thread_mutator_suspend_func) (gpointer user_data, gpointer sigctx);
+	void (*thread_collector_suspend_func) (gpointer user_data);
+
+	void (*thread_mutator_suspend_now) (gpointer user_data);
+
+	void (*thread_collector_dissolve_parking_func) (void);
+
+	void (*thread_collector_restart_func) (gpointer user_data);
+	void (*thread_mutator_restart_func) (gpointer user_data);
+
+	/*
+	 * Function called during thread detach.
 	 */
-	void (*thread_suspend_func) (gpointer user_data, void *sigcontext);
-	/* 
-	 * Function called to mark from thread stacks. user_data is the data returned 
-	 * by attach_func. This is called twice, with the word stopped:
-	 * - in the first pass, it should mark areas of the stack using
-	 *   conservative marking by calling mono_gc_conservatively_scan_area ().
-	 * - in the second pass, it should mark the remaining areas of the stack
-	 *   using precise marking by calling mono_gc_scan_object ().
-	 */
-	void (*thread_mark_func) (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise);
+	void (*thread_detach_func) (gpointer user_data);
 } MonoGCCallbacks;
 
 /* Set the callback functions callable by the GC */
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 159586)
+++ mono/mini/mini.c	(working copy)
@@ -3279,6 +3279,11 @@
 
 	mono_debug_open_method (cfg);
 
+#ifdef MONO_GC_SAFE_POINTS
+	cfg->safe_points_tail = cfg->safe_points_head = NULL;
+	cfg->safe_points_num = 0;
+#endif
+
 	/* emit code all basic blocks */
 	for (bb = cfg->bb_entry; bb; bb = bb->next_bb) {
 		bb->native_offset = cfg->code_len;
@@ -3300,6 +3305,11 @@
 		}
 	}
 
+#ifdef MONO_GC_SAFE_POINTS
+	if (cfg->safe_points_tail)
+		cfg->safe_points_tail->next = NULL; 
+#endif
+
 	mono_arch_emit_exceptions (cfg);
 
 	max_epilog_size = 0;
@@ -3401,6 +3411,53 @@
 	}
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+
+static const char *
+safe_point_reason_to_string (MonoSafePointReason reason)
+{
+	switch (reason) {
+	case SAFE_POINT_TYPE_BACKWARD_BRANCH:
+		return "backward_branch";
+	case SAFE_POINT_TYPE_METHOD_CALL:
+		return "method_call";
+	case SAFE_POINT_TYPE_RETURN:
+		return "return";
+	default:
+		g_assert_not_reached ();
+	}
+}
+
+static void
+prepare_safe_point_jit_info (MonoJitInfo *jinfo, MonoCompile *cfg)
+{
+	MonoGCInfo *safe_point_set;
+	MonoSafePointCfgInfo *iter;
+	MonoSafePointJitInfo *safe_points;
+	int i;
+
+	if (cfg->method->dynamic)
+		safe_point_set = g_malloc0 (sizeof (MonoGCInfo) + sizeof (MonoSafePointCfgInfo) * cfg->safe_points_num);
+	else
+		safe_point_set = mono_domain_alloc0 (cfg->domain, sizeof (MonoGCInfo) + sizeof (MonoSafePointCfgInfo) * cfg->safe_points_num);
+
+	safe_points = (gpointer) safe_point_set + sizeof (MonoGCInfo);
+
+	for (i = 0, iter = cfg->safe_points_head; iter; iter = iter->next, i++) {
+		if (i >= cfg->safe_points_num)
+			break;
+		safe_points [i].native_offset = iter->native_offset;
+		safe_points [i].op = iter->op;
+		safe_points [i].reason = iter->reason;
+	}
+	safe_point_set->safe_points = safe_points;
+	safe_point_set->safe_points_len = cfg->safe_points_num;
+
+	jinfo->gc_info = safe_point_set;
+}
+
+#endif
+
 static MonoJitInfo*
 create_jit_info (MonoCompile *cfg, MonoMethod *method_to_compile)
 {
@@ -3638,6 +3695,10 @@
 	}
 #endif
 
+#ifdef MONO_GC_SAFE_POINTS
+	prepare_safe_point_jit_info (jinfo, cfg);
+#endif
+
 	return jinfo;
 }
 #endif
@@ -4474,8 +4535,6 @@
 
 	mono_save_xdebug_info (cfg);
 
-	mini_gc_create_gc_map (cfg);
- 
 	mono_save_seq_point_info (cfg);
 
 	if (!cfg->compile_aot) {
@@ -5005,8 +5064,17 @@
 	 */
 	mono_jit_info_table_remove (domain, ji->ji);
 
-	if (destroy)
+	if (destroy) {
 		mono_code_manager_destroy (ji->code_mp);
+#ifdef MONO_GC_SAFE_POINTS
+		{
+			MonoGCInfo *safe_point_set = ji->ji->gc_info;
+			g_free (safe_point_set->safe_points);
+			g_free (safe_point_set);
+			ji->ji->gc_info = NULL;
+		}
+#endif
+	}
 	g_free (ji);
 }
 
@@ -5728,8 +5796,6 @@
 
 	mono_unwind_init ();
 
-	mini_gc_init ();
-
 	if (getenv ("MONO_DEBUG") != NULL)
 		mini_parse_debug_options ();
 
@@ -6303,6 +6369,68 @@
 	g_hash_table_destroy (assemblies);
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+
+gchar *
+mono_jit_safe_point_descr (MonoSafePointJitInfo *info)
+{
+	if (info->op == -1) {
+		/*
+		 * This is so that STORE_SAFE_POINT_INFO (cfg, code, FOO, -1) can be used to mark one particular instruction
+		 * and used for debugged.
+		 */
+		return g_strdup_printf ("(jit safe pt. %s 0x%x DEBUG)", safe_point_reason_to_string (info->reason), info->native_offset);
+	} else if (info->op) {
+		g_assert (info->op >= MONO_CEE_LAST);
+		return g_strdup_printf ("(jit safe pt. %s 0x%x %s)", safe_point_reason_to_string (info->reason), info->native_offset, mono_inst_name (info->op));
+	} else {
+		return g_strdup_printf ("(jit safe pt. %s 0x%x nil)", safe_point_reason_to_string (info->reason), info->native_offset);
+	}
+}
+
+gboolean
+mono_is_safe_point (const MonoInst *inst, const MonoCompile *cfg, const guint8 *code, MonoSafePointReason *reason)
+{
+	guint16 op = inst->opcode;
+	long code_offset = code - cfg->native_code;
+
+	g_assert (reason);
+
+	if ((op >= OP_VOIDCALL && op <= OP_DYN_CALL) || op == OP_JMP || op == OP_TAILCALL) {
+		*reason = SAFE_POINT_TYPE_METHOD_CALL;
+		return TRUE;
+	}
+
+	if (op == OP_BR && inst->inst_target_bb->native_offset && inst->inst_target_bb->native_offset && code_offset > inst->inst_target_bb->native_offset) {
+		*reason = SAFE_POINT_TYPE_BACKWARD_BRANCH;
+		return TRUE;
+	}
+
+	if ((op >= OP_IBEQ && op <= OP_IBLT_UN) && inst->inst_true_bb->native_offset && code_offset > inst->inst_true_bb->native_offset) {
+		*reason = SAFE_POINT_TYPE_BACKWARD_BRANCH;
+		return TRUE;
+	}
+
+	if ((op >= OP_LBEQ && op <= OP_LBLT_UN) && inst->inst_true_bb->native_offset && code_offset > inst->inst_true_bb->native_offset) {
+		*reason = SAFE_POINT_TYPE_BACKWARD_BRANCH;
+		return TRUE;
+	}
+
+	if ((op >= OP_FBEQ && op <= OP_FBLT_UN) && inst->inst_true_bb->native_offset && code_offset > inst->inst_true_bb->native_offset) {
+		*reason = SAFE_POINT_TYPE_BACKWARD_BRANCH;
+		return TRUE;
+	}
+
+	if (op == OP_BR_REG) { /* Can't take chances. */
+		*reason = SAFE_POINT_TYPE_BACKWARD_BRANCH;
+		return TRUE;
+	}
+
+	return FALSE;
+}
+
+#endif // MONO_GC_SAFE_POINTS
+
 #ifndef DISABLE_JIT
 
 void*
Index: mono/mini/mini.h
===================================================================
--- mono/mini/mini.h	(revision 159586)
+++ mono/mini/mini.h	(working copy)
@@ -17,7 +17,12 @@
 #include <mono/metadata/profiler-private.h>
 #include <mono/metadata/debug-helpers.h>
 #include <mono/utils/mono-compiler.h>
+#include <mono/metadata/gc-internal.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
 #define MONO_BREAKPOINT_ARRAY_SIZE 64
 
 /* C type matching the size of a machine register. Not always the same as 'int' */
@@ -443,7 +448,53 @@
 	int offset;
 };
 
+typedef enum {
+	SAFE_POINT_TYPE_BACKWARD_BRANCH,
+	SAFE_POINT_TYPE_METHOD_CALL,
+	SAFE_POINT_TYPE_RETURN,
+	SAFE_POINT_TYPE_MAX
+} MonoSafePointReason;
+
 /*
+ * Holds the GC map for a stack frame at a particular safe point.
+ * This is created from the corresponding MonoSafePointCfgInfo structures in 
+ * create_jit_info.
+ */
+typedef struct {
+	guint native_offset;
+	MonoSafePointReason reason;
+
+	/*
+	 * Currently op only serves a decorative purpose, but later it will be
+	 * used to figure out things like whether a method call was a tail call
+	 * (and hence a stack frame has been discarded) and so on. This may also
+	 * be merged with (reason) later, since they are not really independent fields.
+	 */
+	int op;
+} MonoSafePointJitInfo;
+
+/*
+ * Represents a safe point inside the control flow graph (MonoCompile).
+ */
+typedef struct MonoSafePointCfgInfo {
+	guint native_offset;
+	int id, op;
+	MonoSafePointReason reason;
+	struct MonoSafePointCfgInfo *next;
+} MonoSafePointCfgInfo;
+
+/*
+ * A list of all the MonoSafePointJitInfo structures for a particular method
+ * along with some other useful information.
+ */
+typedef struct {
+	MonoSafePointJitInfo *safe_points;
+	guint32 safe_points_len;
+} MonoGCInfo;
+
+gchar *mono_jit_safe_point_descr (MonoSafePointJitInfo *);
+
+/*
  * The IR-level extended basic block.  
  *
  * A basic block can have multiple exits just fine, as long as the point of
@@ -1202,6 +1253,11 @@
 	int llvm_this_reg, llvm_this_offset;
 
 	GSList *try_block_holes;
+
+#ifdef MONO_GC_SAFE_POINTS
+	MonoSafePointCfgInfo *safe_points_head, *safe_points_tail;
+	guint32 safe_points_num;
+#endif
 } MonoCompile;
 
 typedef enum {
@@ -1792,6 +1848,17 @@
 guint8*   mono_arch_emit_load_aotconst          (guint8 *start, guint8 *code, MonoJumpInfo **ji, int tramp_type, gconstpointer target) MONO_INTERNAL;
 GSList*   mono_arch_get_cie_program             (void) MONO_INTERNAL;
 
+#ifdef MONO_GC_SAFE_POINTS
+gpointer mono_arch_emit_safe_point (gpointer ip) MONO_INTERNAL;
+void mono_arch_clear_safe_point (gpointer ip, gpointer prev) MONO_INTERNAL;
+void mono_arch_patch_safe_point_context (gpointer sigctx) MONO_INTERNAL;
+
+typedef void (*ExceptionCallbackFunc) (gpointer sigctx);
+
+/* Call with NULL to reset */
+void mono_arch_install_exception_callback (ExceptionCallbackFunc) MONO_INTERNAL;
+#endif
+
 /* Soft Debug support */
 #ifdef MONO_ARCH_SOFT_DEBUG_SUPPORTED
 void      mono_arch_set_breakpoint              (MonoJitInfo *ji, guint8 *ip) MONO_INTERNAL;
@@ -2202,4 +2269,37 @@
 	MONO_AOT_WRAPPER_LAST
 };
 
+#ifdef MONO_GC_SAFE_POINTS
+
+gboolean mono_is_safe_point (const MonoInst *inst, const MonoCompile *cfg, const guint8 *code, MonoSafePointReason *reason);
+
+#define STORE_SAFE_POINT_INFO(cfg,code,reas,opcode) do {\
+	if ((cfg)->compile_aot) \
+		NOT_IMPLEMENTED; \
+	if (((cfg)->safe_points_head) == NULL) { \
+		((cfg)->safe_points_head) = ((cfg)->safe_points_tail) = mono_mempool_alloc ((cfg)->mempool, sizeof (MonoSafePointCfgInfo)); \
+	} else { \
+		((cfg)->safe_points_tail)->next = mono_mempool_alloc ((cfg)->mempool, sizeof (MonoSafePointCfgInfo)); \
+		((cfg)->safe_points_tail) = ((cfg)->safe_points_tail)->next; \
+	} \
+	((cfg)->safe_points_tail)->native_offset = code - cfg->native_code; \
+	((cfg)->safe_points_tail)->reason = reas; \
+	((cfg)->safe_points_tail)->op = opcode; \
+	((cfg)->safe_points_num)++; \
+} while (0)
+
+#define STORE_SAFE_POINT_INFO_FULL(cfg, code, inst) \
+do { \
+	MonoSafePointReason r; \
+	if (mono_is_safe_point (inst, cfg, code, &r)) \
+		STORE_SAFE_POINT_INFO(cfg,code,r,inst->opcode); \
+} while (0)
+
+#else
+
+#define STORE_SAFE_POINT_INFO(cfg,offet,reas,oper)
+#define STORE_SAFE_POINT_INFO_FULL(cfg, code, inst)
+
+#endif
+
 #endif /* __MONO_MINI_H__ */
Index: mono/mini/mini-amd64.c
===================================================================
--- mono/mini/mini-amd64.c	(revision 159586)
+++ mono/mini/mini-amd64.c	(working copy)
@@ -2653,6 +2653,8 @@
 			no_patch = TRUE;
 		}
 
+		STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_METHOD_CALL, 0);
+
 		if (near_call) {
 			/* 
 			 * Align the call displacement to an address divisible by 4 so it does
@@ -3996,6 +3998,7 @@
 		case OP_LBGT_UN:
 		case OP_LBGE_UN:
 		case OP_LBLE_UN:
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, cc_table [mono_opcode_to_cond (ins->opcode)], cc_signed_table [mono_opcode_to_cond (ins->opcode)]);
 			break;
 
@@ -4104,6 +4107,9 @@
 				amd64_mov_reg_membase (code, AMD64_R11, AMD64_RIP, 0, 8);
 			else
 				amd64_set_reg_template (code, AMD64_R11);
+
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_BACKWARD_BRANCH, ins->opcode);
+
 			amd64_jump_reg (code, AMD64_R11);
 			break;
 		}
@@ -4196,6 +4202,8 @@
 					amd64_mov_reg_imm (code, AMD64_RAX, nregs);
 			}
 
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_METHOD_CALL, ins->opcode);
+
 			amd64_call_reg (code, ins->sreg1);
 			if (call->stack_usage && !CALLCONV_IS_STDCALL (call->signature->call_convention) && !cfg->arch.no_pushes)
 				amd64_alu_reg_imm (code, X86_ADD, AMD64_RSP, call->stack_usage);
@@ -4225,6 +4233,8 @@
 			amd64_nop (code);
 			amd64_nop (code);
 
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_METHOD_CALL, ins->opcode);
+
 			amd64_call_membase (code, ins->sreg1, ins->inst_offset);
 			if (call->stack_usage && !CALLCONV_IS_STDCALL (call->signature->call_convention) && !cfg->arch.no_pushes)
 				amd64_alu_reg_imm (code, X86_ADD, AMD64_RSP, call->stack_usage);
@@ -4248,6 +4258,8 @@
 			for (i = 0; i < PARAM_REGS; ++i)
 				amd64_mov_reg_membase (code, param_regs [i], AMD64_R11, i * sizeof (gpointer), 8);
 			
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_METHOD_CALL, ins->opcode);
+
 			/* Make the call */
 			amd64_call_reg (code, AMD64_R10);
 
@@ -4358,6 +4370,7 @@
 			/* Align stack */
 			amd64_alu_reg_imm (code, X86_SUB, AMD64_RSP, 8);
 			mono_add_patch_info (cfg, code - cfg->native_code, MONO_PATCH_INFO_BB, ins->inst_target_bb);
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_METHOD_CALL, ins->opcode);
 			amd64_call_imm (code, 0);
 			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			/* Restore stack alignment */
@@ -4377,6 +4390,7 @@
 		case OP_ENDFINALLY: {
 			MonoInst *spvar = mono_find_spvar_for_region (cfg, bb->region);
 			amd64_mov_reg_membase (code, AMD64_RSP, spvar->inst_basereg, spvar->inst_offset, 8);
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_RETURN, 0);
 			amd64_ret (code);
 			break;
 		}
@@ -4384,6 +4398,7 @@
 			MonoInst *spvar = mono_find_spvar_for_region (cfg, bb->region);
 			amd64_mov_reg_membase (code, AMD64_RSP, spvar->inst_basereg, spvar->inst_offset, 8);
 			/* The local allocator will put the result into RAX */
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_RETURN, 0);
 			amd64_ret (code);
 			break;
 		}
@@ -4396,6 +4411,7 @@
 			//if ((ins->inst_target_bb == bb->next_bb) && ins == bb->last_ins)
 			//break;
 				if (ins->inst_target_bb->native_offset) {
+					STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 					amd64_jump_code (code, cfg->native_code + ins->inst_target_bb->native_offset); 
 				} else {
 					mono_add_patch_info (cfg, offset, MONO_PATCH_INFO_BB, ins->inst_target_bb);
@@ -4407,6 +4423,7 @@
 			}
 			break;
 		case OP_BR_REG:
+			STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_BACKWARD_BRANCH, ins->opcode);
 			amd64_jump_reg (code, ins->sreg1);
 			break;
 		case OP_CEQ:
@@ -4782,6 +4799,7 @@
 		case OP_FBEQ: {
 			guchar *jump = code;
 			x86_branch8 (code, X86_CC_P, 0, TRUE);
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_EQ, FALSE);
 			amd64_patch (jump, code);
 			break;
@@ -4789,17 +4807,30 @@
 		case OP_FBNE_UN:
 			/* Branch if C013 != 100 */
 			/* branch if !ZF or (PF|CF) */
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_NE, FALSE);
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_P, FALSE);
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_B, FALSE);
+
 			break;
 		case OP_FBLT:
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_GT, FALSE);
 			break;
 		case OP_FBLT_UN:
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_P, FALSE);
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_GT, FALSE);
 			break;
+
 		case OP_FBGT:
 		case OP_FBGT_UN:
 			if (ins->opcode == OP_FBGT) {
@@ -4807,12 +4838,15 @@
 
 				/* skip branch if C1=1 */
 				br1 = code;
+				STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 				x86_branch8 (code, X86_CC_P, 0, FALSE);
 				/* branch if (C0 | C3) = 1 */
+				STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 				EMIT_COND_BRANCH (ins, X86_CC_LT, FALSE);
 				amd64_patch (br1, code);
 				break;
 			} else {
+				STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 				EMIT_COND_BRANCH (ins, X86_CC_LT, FALSE);
 			}
 			break;
@@ -4822,14 +4856,17 @@
 
 			/* skip branch if C1=1 */
 			br1 = code;
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			x86_branch8 (code, X86_CC_P, 0, FALSE);
 			/* branch if (C0 | C3) = 1 */
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_BE, FALSE);
 			amd64_patch (br1, code);
 			break;
 		}
 		case OP_FBGE_UN:
 			/* Branch if C013 == 000 */
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_LE, FALSE);
 			break;
 		case OP_FBLE: {
@@ -4838,15 +4875,20 @@
 
 			/* skip branch if C1=1 */
 			br1 = code;
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			x86_branch8 (code, X86_CC_P, 0, FALSE);
 			/* branch if C0=0 */
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_NB, FALSE);
 			amd64_patch (br1, code);
 			break;
 		}
 		case OP_FBLE_UN:
 			/* Branch if C013 != 001 */
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_P, FALSE);
+
+			STORE_SAFE_POINT_INFO_FULL (cfg, code, ins);
 			EMIT_COND_BRANCH (ins, X86_CC_GE, FALSE);
 			break;
 		case OP_CKFINITE:
@@ -6470,6 +6512,8 @@
 		amd64_leave (code);
 	}
 	async_exc_point (code);
+
+	STORE_SAFE_POINT_INFO (cfg, code, SAFE_POINT_TYPE_RETURN, 0);
 	amd64_ret (code);
 
 	cfg->code_len = code - cfg->native_code;
@@ -7718,3 +7762,46 @@
 }
 
 #endif
+
+#ifdef MONO_GC_SAFE_POINTS
+
+gpointer
+mono_arch_emit_safe_point (gpointer ip)
+{
+	guint8 old = *(guint8 *) ip;
+	guint8 *code = ip;
+
+	if (old != 0xCC) {
+		DEBUG_SAFE_POINTS ("Patching IP %p, old instruction 0x%x in thread %p\n", ip, *code, (gpointer) pthread_self ());
+
+		x86_int_trap (code);
+
+		asm ("mfence");
+		asm volatile ("clflush (%0)" : : "r"(ip));
+		asm ("mfence");
+	}
+
+	return GINT_TO_POINTER (old);
+}
+
+void
+mono_arch_clear_safe_point (gpointer ip, gpointer prev)
+{
+	if (((guint8) GPOINTER_TO_INT (prev)) == INT_TRAP_INSTRUCTION_BYTE)
+		return;
+	DEBUG_SAFE_POINTS ("Clearing IP %p, previous instruction 0x%x new instruction 0x%x in thread %p\n", ip, (guint8) prev, *(guint8 *) ip,  (gpointer) pthread_self ());
+	*(guint8 *) ip = (guint8) GPOINTER_TO_INT (prev);
+
+	asm ("mfence");
+	asm volatile ("clflush (%0)" : : "r"(ip));
+	asm ("mfence");
+}
+
+void
+mono_arch_patch_safe_point_context (gpointer sigctx)
+{
+	UCONTEXT_GREGS (sigctx) [REG_RIP] = UCONTEXT_GREGS (sigctx) [REG_RIP] - 1;
+}
+
+#endif
+
Index: mono/mini/exceptions-amd64.c
===================================================================
--- mono/mini/exceptions-amd64.c	(revision 159586)
+++ mono/mini/exceptions-amd64.c	(working copy)
@@ -285,6 +285,19 @@
 	return start;
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+
+static ExceptionCallbackFunc gc_exception_callback = NULL;
+
+void
+mono_arch_install_exception_callback (ExceptionCallbackFunc cb)
+{
+	DEBUG_SAFE_POINTS ("%s exception sgen hook.\n", cb == NULL?"Removing":"Adding");
+	gc_exception_callback = cb;
+}
+
+#endif
+
 /* 
  * The first few arguments are dummy, to force the other arguments to be passed on
  * the stack, this avoids overwriting the argument registers in the throw trampoline.
@@ -300,6 +313,45 @@
 
 	if (!restore_context)
 		restore_context = mono_get_restore_context ();
+	
+#ifdef MONO_GC_SAFE_POINTS
+	/*
+	 * Don't throw an exception when in a stop-the-world routine. This prevents the
+	 * following pattern from infinitely halting:
+	 *
+	 * try {
+	 *    // do something to throw a NullReferenceException
+	 * } catch (NullReferenceException nre) {
+	 *    while (true);
+	 * }
+	 */
+	if (gc_exception_callback) {
+		ucontext_t ctx;
+		#define COPY_REG(r) UCONTEXT_GREGS (&ctx) [REG_R ## r] = regs [AMD64_R ## r]
+		COPY_REG (AX);
+		COPY_REG (BX);
+		COPY_REG (CX);
+		COPY_REG (DX);
+		COPY_REG (SI);
+		COPY_REG (DI);
+		COPY_REG (BP);
+		COPY_REG (8);
+		COPY_REG (9);
+		COPY_REG (10);
+		COPY_REG (11);
+		COPY_REG (12);
+		COPY_REG (13);
+		COPY_REG (14);
+		COPY_REG (15);
+		#undef COPY_REG
+		DEBUG_SAFE_POINTS ("Exception thrown, halting thread.");
+		gc_exception_callback (&ctx);
+	}
+	/* 
+	 * Execution resumes here to regular exception handling code, once
+	 * the collection is over.
+	 */
+#endif
 
 	ctx.rsp = regs [AMD64_RSP];
 	ctx.rip = rip;
Index: mono/mini/mini-gc.c
===================================================================
--- mono/mini/mini-gc.c	(revision 159586)
+++ mono/mini/mini-gc.c	(working copy)
@@ -3,595 +3,267 @@
  *
  * Author:
  *   Zoltan Varga (vargaz@gmail.com)
+ *   Sanjoy Das (sanjoy@playingwithpointers.com)
  *
  * Copyright 2009 Novell, Inc (http://www.novell.com)
  */
 
-#include "config.h"
-#include "mini-gc.h"
 #include <mono/metadata/gc-internal.h>
+#include <mono/mini/mini-gc.h>
 
-/*
- * The code above does not work yet, and probably needs to be thrown out if we move
- * to GC safe points.
- */
+#ifdef HAVE_SGEN_GC
 
-#if 0
-//#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-archdep.h>
+#include <mono/metadata/sgen-gc.h>
 
-#include <mono/metadata/gc-internal.h>
-#include <mono/utils/mono-counters.h>
 
-#define ALIGN_TO(val,align) ((((guint64)val) + ((align) - 1)) & ~((align) - 1))
+#ifdef MONO_GC_SAFE_POINTS
 
-#if 1
-#define DEBUG(s) do { s; } while (0)
-#else
-#define DEBUG(s)
-#endif
+typedef struct {
+	/*
+	 * The various instructions that were patched and their locations.
+	 */
+	GPtrArray *previous_instructions; 
+	GPtrArray *safe_point_ips;
 
-#if 1
-#define DEBUG_GC_MAP(s) do { s; fflush (stdout); } while (0)
-#else
-#define DEBUG_GC_MAP(s)
-#endif
+	gpointer sigctx;
+	int thread_state;
+} TlsJitInfo;
 
-#define GC_BITS_PER_WORD (sizeof (gsize) * 8)
+enum {
+	THREAD_RUNNING,
+	THREAD_PARKED_AT_SAFE_POINT,
+	THREAD_PARKED_FORCED
+};
 
-/*
- * Per-thread data kept by this module. This is stored in the GC and passed to us as
- * parameters, instead of being stored in a TLS variable, since during a collection,
- * only the collection thread is active.
- */
-typedef struct {
-	MonoLMF *lmf;
-	MonoContext ctx;
-	gboolean has_context;
-	MonoJitTlsData *jit_tls;
-} TlsData;
+typedef gboolean (*ForEachStackFrameFunc) (MonoJitInfo * /* Jit info */, MonoContext *, int /* counter */, gpointer /* user_data */);
 
-typedef enum {
-	/* Stack slot doesn't contain a reference */
-	SLOT_NOREF = 0,
-	/* Stack slot contains a reference */
-	SLOT_REF = 1,
-	/* No info, slot needs to be scanned conservatively */
-	SLOT_PIN = 2
-} StackSlotType;
+static void
+for_each_stack_frame (gpointer sigctx, ForEachStackFrameFunc func, gpointer user_data)
+{
+	MonoDomain *domain = mono_domain_get ();
+	MonoJitTlsData *jit_tls = TlsGetValue (mono_get_jit_tls_key ());
+	MonoLMF *lmf = mono_get_lmf ();
+	MonoContext ctx, new_ctx;
+	MonoJitInfo *ji, rji;
 
-/* 
- * Contains information needed to mark a stack frame.
- * FIXME: Optimize the memory usage.
- */
-typedef struct {
-	/* The frame pointer register */
-	int frame_reg;
-	/* The offset of the local variable area in the stack frame relative to the frame pointer */
-	int locals_offset;
-	/* The size of the locals area. Can't use nslots as it includes padding */
-	int locals_size;
-	/* The number of stack slots */
-	int nslots;
-	/* 
-	 * The gc map itself.
-	 */
-	StackSlotType *slots;
-	/* A pair of low pc offset-high pc offset for each SLOT_REF value in gc_refs */
-	guint32 live_ranges [MONO_ZERO_LEN_ARRAY];
-} GCMap;
+	int counter = 0;
+	MonoMethod *last_method = NULL;
+	mono_arch_sigctx_to_monoctx (sigctx, &ctx);
 
-/* Statistics */
-static guint32 gc_maps_size;
+	g_assert (MONO_CONTEXT_GET_IP (&ctx) == ARCH_SIGCTX_IP (sigctx));
 
+	while (1) {
+		ji = mono_find_jit_info (domain, jit_tls, &rji, NULL, &ctx, &new_ctx, NULL, &lmf, NULL, NULL);
+		if (!ji || ji == (gpointer)-1 || MONO_CONTEXT_GET_SP (&ctx) >= jit_tls->end_of_stack)
+			break; 
+		
+		/* 
+		 * See mini-exceptions.c : ves_icall_get_frame_info for an explanation
+		 */
+		if (ji->method->wrapper_type == MONO_WRAPPER_MANAGED_TO_NATIVE && ji->method == last_method)
+			continue;
+		last_method = ji->method;
+
+		if (!func (ji, &ctx, counter, user_data))
+			break;
+		ctx = new_ctx;
+		counter++;
+	}
+}
+
 static gpointer
-thread_attach_func (void)
+thread_attach (void)
 {
-	return g_new0 (TlsData, 1);
+	return g_malloc0 (sizeof (TlsJitInfo));
 }
 
 static void
-thread_suspend_func (gpointer user_data, void *sigctx)
+int_3_handler (int sig, siginfo_t *siginfo, void *context)
 {
-	TlsData *tls = user_data;
-
-	tls->lmf = mono_get_lmf ();
-	if (sigctx) {
-		mono_arch_sigctx_to_monoctx (sigctx, &tls->ctx);
-		tls->has_context = TRUE;
-	} else {
-		tls->has_context = FALSE;
-	}
-	tls->jit_tls = TlsGetValue (mono_jit_tls_id);
+	mono_arch_patch_safe_point_context (context);
+	mono_sgen_thread_ready_to_suspend (context);
 }
 
-static int precise_frame_count [2], precise_frame_limit = -1;
-static gboolean precise_frame_limit_inited;
-
-#define DEAD_REF ((gpointer)(gssize)0x2a2a2a2a2a2a2a2aULL)
-
 static void
-thread_mark_func (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise)
+gc_exception_callback (gpointer sigctx)
 {
-	TlsData *tls = user_data;
-	MonoJitInfo *ji, res;
-	MonoContext ctx, new_ctx;
-	MonoLMF *lmf = tls->lmf;
-	guint8 *stack_limit;
-	gboolean last = TRUE, managed;
-	GCMap *map;
-	guint8* fp, *locals_start, *locals_end;
-	int i, pc_offset;
-	int scanned = 0, scanned_precisely, scanned_conservatively;
-
-	if (mono_thread_internal_current () == NULL) {
-		if (!precise)
-			mono_gc_conservatively_scan_area (stack_start, stack_end);			
-		return;
-	}
-
-	/* Number of bytes scanned based on GC map data */
-	scanned = 0;
-	/* Number of bytes scanned precisely based on GC map data */
-	scanned_precisely = 0;
-	/* Number of bytes scanned conservatively based on GC map data */
-	scanned_conservatively = 0;
-
-	/* FIXME: sgen-gc.c calls this multiple times for each major collection from pin_from_roots */
-
-	/* FIXME: Use real gc descriptors instead of bitmaps */
-
-	/* This is one past the last address which we have scanned */
-	stack_limit = stack_start;
-
-	DEBUG (printf ("*** %s stack marking %p-%p ***\n", precise ? "Precise" : "Conservative", stack_start, stack_end));
-
-	if (!tls->has_context) {
-		memset (&new_ctx, 0, sizeof (ctx));
-
-		while (TRUE) {
-			memcpy (&ctx, &new_ctx, sizeof (ctx));
-
-			g_assert ((guint64)stack_limit % sizeof (gpointer) == 0);
-
-			// FIXME: This doesn't work with appdomain transitions
-			ji = mono_find_jit_info (mono_domain_get (), tls->jit_tls, &res, NULL,
-									 &ctx, &new_ctx, NULL, &lmf, NULL, &managed);
-			if (ji == (gpointer)-1)
-				break;
-
-			/* The last frame can be in any state so mark conservatively */
-			if (last) {
-				last = FALSE;
-				continue;
-			}
-
-			/* These frames are returned by mono_find_jit_info () two times */
-			if (!managed)
-				continue;
-
-			/* Scan the frame of this method */
-
-			/*
-			 * A frame contains the following:
-			 * - saved registers
-			 * - saved args
-			 * - locals
-			 * - spill area
-			 * - localloc-ed memory
-			 * Currently, only the locals are scanned precisely.
-			 */
-
-			map = ji->gc_info;
-
-			if (!map) {
-				DEBUG (char *fname = mono_method_full_name (ji->method, TRUE); printf ("Mark(%d): No GC map for %s\n", precise, fname); g_free (fname));
-				continue;
-			}
-
-			/*
-			 * Debugging aid to control the number of frames scanned precisely
-			 */
-			if (!precise_frame_limit_inited) {
-				if (getenv ("MONO_PRECISE_COUNT"))
-					precise_frame_limit = atoi (getenv ("MONO_PRECISE_COUNT"));
-				precise_frame_limit_inited = TRUE;
-			}
-				
-			if (precise_frame_limit != -1) {
-				if (precise_frame_count [precise] == precise_frame_limit)
-					printf ("LAST PRECISE FRAME: %s\n", mono_method_full_name (ji->method, TRUE));
-				if (precise_frame_count [precise] > precise_frame_limit)
-					continue;
-			}
-			precise_frame_count [precise] ++;
-
-#ifdef __x86_64__
-			if (map->frame_reg == AMD64_RSP)
-				fp = (guint8*)ctx.rsp;
-			else if (map->frame_reg == AMD64_RBP)
-				fp = (guint8*)ctx.rbp;
-			else
-				g_assert_not_reached ();
-#else
-			fp = NULL;
-			g_assert_not_reached ();
-#endif
-
-			locals_start = fp + map->locals_offset;
-			locals_end = locals_start + map->locals_size;
-
-			pc_offset = (guint8*)MONO_CONTEXT_GET_IP (&ctx) - (guint8*)ji->code_start;
-			g_assert (pc_offset >= 0);
-
-			DEBUG (char *fname = mono_method_full_name (ji->method, TRUE); printf ("Mark(%d): %s+0x%x (%p) limit=%p fp=%p locals=%p-%p (%d)\n", precise, fname, pc_offset, (gpointer)MONO_CONTEXT_GET_IP (&ctx), stack_limit, fp, locals_start, locals_end, (int)(locals_end - locals_start)); g_free (fname));
-
-			/* 
-			 * FIXME: Add a function to mark using a bitmap, to avoid doing a 
-			 * call for each object.
-			 */
-
-			scanned += locals_end - locals_start;
-
-			/* Pinning needs to be done first, then the precise scan later */
-
-			if (!precise) {
-				g_assert (locals_start >= stack_limit);
-
-				if (locals_start > stack_limit) {
-					/* This scans the previously skipped frames as well */
-					DEBUG (printf ("\tscan area %p-%p.\n", stack_limit, locals_start));
-					mono_gc_conservatively_scan_area (stack_limit, locals_start);
-				}
-
-				if (map->slots) {
-					guint8 *p;
-
-					p = locals_start;
-					for (i = 0; i < map->nslots; ++i) {
-						if (map->slots [i] == SLOT_PIN) {
-							DEBUG (printf ("\tscan slot %s0x%x(fp)=%p.\n", (guint8*)p > (guint8*)fp ? "" : "-", ABS ((int)((gssize)p - (gssize)fp)), p));
-							mono_gc_conservatively_scan_area (p, p + sizeof (gpointer));
-							scanned_conservatively += sizeof (gpointer);
-						}
-						p += sizeof (gpointer);
-					}
-				}
-
-				stack_limit = locals_end;
-			} else {
-				if (map->slots) {
-					int loffset = 0;
-
-					for (i = 0; i < map->nslots; ++i) {
-						if (map->slots [i] == SLOT_REF) {
-							MonoObject **ptr = (MonoObject**)(locals_start + (i * sizeof (gpointer)));
-							MonoObject *obj = *ptr;
-
-							if (pc_offset >= map->live_ranges [loffset] && pc_offset < map->live_ranges [loffset + 1] && obj != DEAD_REF) {
-								if (obj) {
-									DEBUG (printf ("\tref %s0x%x(fp)=%p: %p ->", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-									*ptr = mono_gc_scan_object (obj);
-									DEBUG (printf (" %p.\n", *ptr));
-								} else {
-									DEBUG (printf ("\tref %s0x%x(fp)=%p: %p.\n", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-								}
-							} else {
-								DEBUG (printf ("\tref %s0x%x(fp)=%p: dead (%p)\n", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-								/*
-								 * This serves two purposes:
-								 * - fail fast if the live range is incorrect, and
-								 * the JITted code tries to access this object
-								 * - it avoids problems when a dead slot becomes live
-								 * again due to a backward branch 
-								 * (see test_0_liveness_6).
-								 */
-								*ptr = DEAD_REF;
-							}
-
-							loffset += 2;
-							scanned_precisely += sizeof (gpointer);
-						} else if (map->slots [i] == SLOT_NOREF) {
-							scanned_precisely += sizeof (gpointer);
-						}
-					}
-				}
-			}
-		}
-
-		if (stack_limit < stack_end && !precise) {
-			DEBUG (printf ("\tscan area %p-%p.\n", stack_limit, stack_end));
-			mono_gc_conservatively_scan_area (stack_limit, stack_end);
-		}
-	} else {
-		// FIXME:
-		if (!precise) {
-			DEBUG (printf ("\tno context, scan area %p-%p.\n", stack_start, stack_end));
-			mono_gc_conservatively_scan_area (stack_start, stack_end);
-		}
-	}
-
-	DEBUG (printf ("Marked %d bytes, p=%d,c=%d out of %d.\n", scanned, scanned_precisely, scanned_conservatively, (int)(stack_end - stack_start)));
-
-	//mono_gc_conservatively_scan_area (stack_start, stack_end);
+	mono_sgen_thread_ready_to_suspend (sigctx);
 }
 
-#define set_slot(slots, nslots, pos, val) do {	\
-		g_assert ((pos) < (nslots));		   \
-		(slots) [(pos)] = (val);			   \
-	} while (0)
+static struct sigaction prev_sigaction_info;
 
 static void
-mini_gc_init_gc_map (MonoCompile *cfg)
+thread_collector_initiate_parking (void)
 {
-	if (COMPILE_LLVM (cfg))
-		return;
+	struct sigaction sinfo;
+	sigfillset (&sinfo.sa_mask);
+	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
+	sinfo.sa_sigaction = int_3_handler;
+	if (sigaction (SIGTRAP, &sinfo, &prev_sigaction_info) != 0)
+		g_error ("failed sigaction to set int_3_handler");
+	mono_arch_install_exception_callback (gc_exception_callback);
+}
 
-	/* See mini_gc_create_gc_map () for comments as to why these are needed */
-
-	/* Extend the live ranges using the liveness information */
-	cfg->compute_precise_live_ranges = TRUE;
-	/* Is this still needed ? */
-	cfg->disable_reuse_ref_stack_slots = TRUE;
-	/* 
-	 * Initialize all variables holding refs to null in the initlocals bblock, not just
-	 *  variables representing IL locals.
-	 */
-	cfg->init_ref_vars = TRUE;
-	/* Prevent these initializations from being optimized away */
-	cfg->disable_initlocals_opt_refs = TRUE;
+static void
+thread_collector_dissolve_parking (void)
+{
+	if (sigaction (SIGTRAP, &prev_sigaction_info, NULL) != 0)
+		g_error ("failed sigaction to unset int_3_handler");
+	mono_arch_install_exception_callback (NULL);
 }
 
-void
-mini_gc_create_gc_map (MonoCompile *cfg)
+static gboolean
+iterate_find_safe_point_ip (MonoJitInfo *ji, MonoContext *ctx, int counter, gpointer user_data)
 {
-	GCMap *map;
-	int i, nslots, alloc_size, loffset, min_offset, max_offset;
-	StackSlotType *slots = NULL;
-	gboolean norefs = FALSE;
-	guint32 *live_range_start, *live_range_end;
+	GPtrArray *ips = user_data;
+	MonoGCInfo *gc_info = ji->gc_info;
+	MonoSafePointJitInfo *safe_points = gc_info->safe_points;
+	gpointer native_ip = MONO_CONTEXT_GET_IP (ctx);
+	int i;
 
 	/*
-	 * Since we currently don't use GC safe points, we need to create GC maps which
-	 * are precise at every instruction within a method. We use the live ranges
-	 * calculated by the JIT in mono_spill_global_vars () for this. Unfortunately by 
-	 * default these are not precise enought for several reasons:
-	 * - the current calculation of MonoMethodVar->live_range_start/end is incorrect,
-	 * it doesn't take into account loops etc. It needs to use the results of the
-	 * liveness analysis pass.
-	 * - the current liveness analysis pass is too conservative, ie. the live_in/out
-	 * sets computed by it are sometimes include too many variables, for example because
-	 * of the bogus links between bblocks. This means the live_in/out sets cannot be
-	 * used to reliably compute precise live ranges.
-	 * - stack slots are shared, which means the live ranges of stack slots have holes
-	 * in them.
-	 * - the live ranges of variables used in out-of-line bblocks also have holes in
-	 * them.
-	 * - the live ranges of variables used for handling stack args also have holes in
-	 * them:
-	 *   if (A)
-     *     x = <ref>
-	 *   else
-	 *     x = <ref>
-	 *   <use x>
-	 * Here x is not live between the first and the second assignment.
+	 * Checking mono_sgen_is_inconsistent_method is better than imposing some arbitrary restriction
+	 * on managed allocators and write barriers.
 	 *
-	 * To work around these problems, we set a few cfg flags in mini_init_gc_maps ()
-	 * which guarantee that the live range of stack slots have no holes, i.e. they hold
-	 * a valid value (or null) during their entire live range.
-	 * FIXME: This doesn't completely work yet, see test_0_liveness_6 (), where
-	 * a variable becomes dead, then alive again.
+	 * Backward jump safe points are not 'counted in' when the method is inconsistent.
 	 */
-	//NOT_IMPLEMENTED;
+	gboolean inconsistent = mono_sgen_is_inconsistent_method (ji->method);
 
-	if (!(cfg->comp_done & MONO_COMP_LIVENESS))
-		/* Without liveness info, the live ranges are not precise enough */
-		return;
+	if (native_ip < ji->code_start)
+		return TRUE;
 
-#ifdef TARGET_AMD64
-	min_offset = ALIGN_TO (cfg->locals_min_stack_offset, sizeof (gpointer));
-	max_offset = cfg->locals_max_stack_offset;
-#else
-	/* min/max stack offset needs to be computed in mono_arch_allocate_vars () */
-	NOT_IMPLEMENTED;
-#endif
+	for (i = 0; i < gc_info->safe_points_len; i++) {
+		if (safe_points [i].reason == SAFE_POINT_TYPE_RETURN) {
+			g_ptr_array_add (ips, (gpointer) (safe_points [i].native_offset + ji->code_start));
+			DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+		} else if (!inconsistent && safe_points [i].reason == SAFE_POINT_TYPE_BACKWARD_BRANCH) {
+			if ((safe_points [i].native_offset + ji->code_start) >= native_ip) {
+				g_ptr_array_add (ips, (gpointer) (safe_points [i].native_offset + ji->code_start));
+				DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+			}
+		} else if (safe_points [i].reason == SAFE_POINT_TYPE_METHOD_CALL) {
+			g_ptr_array_add (ips, (gpointer) (safe_points [i].native_offset + ji->code_start));
+			DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+		}
+	}
 
-	for (i = cfg->locals_start; i < cfg->num_varinfo; i++) {
-		MonoInst *ins = cfg->varinfo [i];
-		MonoType *t = ins->inst_vtype;
+	DEBUG_SAFE_POINTS ("\n");
 
-		if ((MONO_TYPE_ISSTRUCT (t) && ins->klass->has_references))
-			break;
-		if (MONO_TYPE_ISSTRUCT (t))
-			break;
-		if (t->byref || t->type == MONO_TYPE_PTR)
-			break;
-		if (ins && ins->opcode == OP_REGOFFSET && MONO_TYPE_IS_REFERENCE (ins->inst_vtype))
-			break;
-	}
+	return FALSE;
+}
 
-	if (i == cfg->num_varinfo)
-		norefs = TRUE;
+static void
+thread_mutator_suspend (gpointer user_data, gpointer context)
+{
+	MonoDomain *domain = mono_domain_get ();
+	TlsJitInfo *tls = user_data;
+	GPtrArray *ips = g_ptr_array_new ();
 
-	if (cfg->verbose_level > 1)
-		printf ("GC Map for %s: 0x%x-0x%x\n", mono_method_full_name (cfg->method, TRUE), min_offset, max_offset);
+	tls->thread_state = THREAD_RUNNING;
+	tls->sigctx = context;
 
-	nslots = (max_offset - min_offset) / sizeof (gpointer);
-	if (!norefs) {
-		alloc_size = nslots * sizeof (StackSlotType);
-		slots = mono_domain_alloc0 (cfg->domain, alloc_size);
-		for (i = 0; i < nslots; ++i)
-			slots [i] = SLOT_NOREF;
-		gc_maps_size += alloc_size;
+	if (!mono_thread_internal_current ()) {
+		g_warning ("mono_thread_internal_current () returned NULL");
+		tls->thread_state = THREAD_PARKED_FORCED;
+		return;
 	}
-	live_range_start = g_new (guint32, nslots);
-	live_range_end = g_new (guint32, nslots);
-	loffset = 0;
 
-	for (i = 0; i < nslots; ++i) {
-		live_range_start [i] = (guint32)-1;
-		live_range_end [i] = 0;
+	if (!mono_jit_info_table_find (domain, ARCH_SIGCTX_IP (context))) {
+		tls->thread_state = THREAD_PARKED_FORCED;
+		return;
 	}
 
-	for (i = cfg->locals_start; i < cfg->num_varinfo; i++) {
-		MonoInst *ins = cfg->varinfo [i];
-		MonoType *t = ins->inst_vtype;
-		MonoMethodVar *vmv;
-		guint32 pos;
+	for_each_stack_frame (context, iterate_find_safe_point_ip, ips);
 
-		if (norefs)
-			continue;
+	tls->safe_point_ips = ips;
+}
 
-		vmv = MONO_VARINFO (cfg, i);
+static void
+thread_collector_suspend (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
+	int i;
 
-		if (ins->opcode != OP_REGOFFSET)
-			continue;
+	if (tls->thread_state == THREAD_PARKED_FORCED)
+		return;
 
-		if (ins->inst_offset % sizeof (gpointer) != 0)
-			continue;
+	tls->previous_instructions = g_ptr_array_new ();
 
-		pos = (ins->inst_offset - min_offset) / sizeof (gpointer);
+	DEBUG_SAFE_POINTS ("Patching %d instructions.\n", ip_data.ips->len);
+	for (i = 0; i < tls->safe_point_ips->len; i++)
+		g_ptr_array_add (tls->previous_instructions, mono_arch_emit_safe_point (g_ptr_array_index (tls->safe_point_ips, i)));
 
-		if ((MONO_TYPE_ISSTRUCT (t) && !ins->klass->has_references))
-			continue;
+	tls->thread_state = THREAD_PARKED_AT_SAFE_POINT;
 
-		if ((MONO_TYPE_ISSTRUCT (t) && ins->klass->has_references)) {
-			int numbits, j;
-			gsize *bitmap;
-			gboolean pin;
+	DEBUG_SAFE_POINTS ("Patched thread %p.\n", (gpointer) pthread_self ());
+}
 
-			if (ins->klass->generic_container || mono_class_is_open_constructed_type (t)) {
-				/* FIXME: Generic sharing */
-				pin = TRUE;
-			} else {
-				mono_class_compute_gc_descriptor (ins->klass);
+static void
+thread_mutator_suspend_now (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
 
-				bitmap = mono_gc_get_bitmap_for_descr (ins->klass->gc_descr, &numbits);
+	if (tls->thread_state == THREAD_PARKED_FORCED)
+		mono_sgen_thread_ready_to_suspend (tls->sigctx);
+}
 
-				if (bitmap) {
-					for (j = 0; j < numbits; ++j) {
-						if (bitmap [j / GC_BITS_PER_WORD] & ((gsize)1 << (j % GC_BITS_PER_WORD))) {
-							/* The descriptor is for the boxed object */
-							set_slot (slots, nslots, (pos + j - (sizeof (MonoObject) / sizeof (gpointer))), SLOT_REF);
-						}
-					}
-					g_free (bitmap);
+static void
+thread_collector_restart (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
 
-					if (cfg->verbose_level > 1)
-						printf ("\tvtype at fp+0x%x: %s -> 0x%x\n", (int)ins->inst_offset, mono_type_full_name (ins->inst_vtype), (int)ins->inst_offset);
+	if (tls->thread_state == THREAD_RUNNING)
+		g_warning ("thread_resume_prepare_func called with tls->thread_state == THREAD_RUNNING");
 
-					// FIXME: These have no live range
-					pin = TRUE;
-				} else {
-					// FIXME:
-					pin = TRUE;
-				}
-			}
-
-			if (ins->backend.is_pinvoke)
-				pin = TRUE;
-
-			if (pin) {
-				int size;
-
-				if (ins->backend.is_pinvoke)
-					size = mono_class_native_size (ins->klass, NULL);
-				else
-					size = mono_class_value_size (ins->klass, NULL);
-				for (j = 0; j < size / sizeof (gpointer); ++j)
-					set_slot (slots, nslots, pos + j, SLOT_PIN);
-			}
-			continue;
-		}
-
-		if (ins->inst_offset < min_offset || ins->inst_offset >= max_offset)
-			/* Vret addr etc. */
-			continue;
-
-		if (t->byref || t->type == MONO_TYPE_PTR || t->type == MONO_TYPE_I || t->type == MONO_TYPE_U) {
-			set_slot (slots, nslots, pos, SLOT_PIN);
-			continue;
-		}
-
-		if (MONO_TYPE_IS_REFERENCE (ins->inst_vtype)) {
-			if (vmv && !vmv->live_range_start) {
-				set_slot (slots, nslots, pos, SLOT_PIN);
-				continue;
-			}
-
-			if (ins->flags & (MONO_INST_VOLATILE | MONO_INST_INDIRECT)) {
-				set_slot (slots, nslots, pos, SLOT_PIN);
-				continue;
-			}
-
-			set_slot (slots, nslots, pos, SLOT_REF);
-
-			/* Stack slots holding refs shouldn't be shared */
-			g_assert (!live_range_end [pos]);
-			live_range_start [pos] = vmv->live_range_start;
-			live_range_end [pos] = vmv->live_range_end;
-
-			if (cfg->verbose_level > 1)
-				printf ("\tref at %s0x%x(fp) (slot=%d): %s [0x%x - 0x%x]\n", ins->inst_offset < 0 ? "-" : "", (ins->inst_offset < 0) ? -(int)ins->inst_offset : (int)ins->inst_offset, pos, mono_type_full_name (ins->inst_vtype), vmv->live_range_start, vmv->live_range_end);
-		}
+	if (tls->thread_state == THREAD_PARKED_AT_SAFE_POINT) {
+		int i;
+		for (i = 0; i < tls->safe_point_ips->len; i++) 
+			mono_arch_clear_safe_point (g_ptr_array_index (tls->safe_point_ips, i), g_ptr_array_index (tls->previous_instructions, i));
+		g_ptr_array_free (tls->safe_point_ips, TRUE);
+		g_ptr_array_free (tls->previous_instructions, TRUE);
 	}
 
-	alloc_size = sizeof (GCMap) + (norefs ? 0 : (nslots - MONO_ZERO_LEN_ARRAY) * sizeof (guint32) * 2);
-	map = mono_domain_alloc0 (cfg->domain, alloc_size);
-	gc_maps_size += alloc_size;
+	tls->thread_state = THREAD_RUNNING;
+	tls->sigctx = NULL;
+}
 
-	map->frame_reg = cfg->frame_reg;
-	map->locals_offset = min_offset;
-	map->locals_size = ALIGN_TO (max_offset - min_offset, sizeof (gpointer));
-	map->nslots = nslots;
-	map->slots = slots;
-	loffset = 0;
-	if (!norefs) {
-		for (i = 0; i < nslots; ++i) {
-			if (map->slots [i] == SLOT_REF) {
-				map->live_ranges [loffset ++] = live_range_start [i];
-				map->live_ranges [loffset ++] = live_range_end [i];
-			}
-		}
-	}
+static void
+thread_mutator_restart (gpointer user_data)
+{
+	/* 
+	 * Not needed now, kept around with the hope that this will be required later.
+	 * Will remove it if not.
+	 */
+}
 
-#if 1
-	{
-		static int precise_count;
-
-		if (map->slots) {
-			precise_count ++;
-			if (getenv ("MONO_GCMAP_COUNT")) {
-				if (precise_count == atoi (getenv ("MONO_GCMAP_COUNT")))
-					printf ("LAST: %s\n", mono_method_full_name (cfg->method, TRUE));
-				if (precise_count > atoi (getenv ("MONO_GCMAP_COUNT"))) {
-					for (i = 0; i < nslots; ++i)
-						map->slots [i] = SLOT_PIN;
-				}
-			}
-		}
-	}
-#endif
-
-	cfg->jit_info->gc_info = map;
-
-	g_free (live_range_start);
-	g_free (live_range_end);
+static void
+thread_detach (gpointer user_data)
+{
+	g_assert (user_data);
+	g_free (user_data);
 }
 
+#endif /* MONO_GC_SAFE_POINTS */
+
 void
 mini_gc_init (void)
 {
 	MonoGCCallbacks cb;
 
 	memset (&cb, 0, sizeof (cb));
-	cb.thread_attach_func = thread_attach_func;
-	cb.thread_suspend_func = thread_suspend_func;
-	/* Comment this out to disable precise stack marking */
-	cb.thread_mark_func = thread_mark_func;
+#ifdef MONO_GC_SAFE_POINTS
+	cb.thread_attach_func = thread_attach;
+	cb.thread_collector_initiate_parking_func = thread_collector_initiate_parking;
+	cb.thread_mutator_suspend_func = thread_mutator_suspend;
+	cb.thread_collector_suspend_func = thread_collector_suspend;
+	cb.thread_mutator_suspend_now = thread_mutator_suspend_now;
+	cb.thread_collector_dissolve_parking_func = thread_collector_dissolve_parking;
+	cb.thread_collector_restart_func = thread_collector_restart;
+	cb.thread_mutator_restart_func = thread_mutator_restart;
+	cb.thread_detach_func = thread_detach;
+#endif
 	mono_gc_set_gc_callbacks (&cb);
-
-	mono_counters_register ("GC Maps size",
-							MONO_COUNTER_GC | MONO_COUNTER_INT, &gc_maps_size);
 }
 
 #else
@@ -601,18 +273,8 @@
 {
 }
 
-static void
-mini_gc_init_gc_map (MonoCompile *cfg)
-{
-}
+#endif /* HAVE_SGEN_GC */
 
-void
-mini_gc_create_gc_map (MonoCompile *cfg)
-{
-}
-
-#endif
-
 /*
  * mini_gc_init_cfg:
  *
@@ -625,6 +287,5 @@
 		cfg->disable_ref_noref_stack_slot_share = TRUE;
 		cfg->gen_write_barriers = TRUE;
 	}
-
-	mini_gc_init_gc_map (cfg);
 }
+
Index: mono/mini/mini-gc.h
===================================================================
--- mono/mini/mini-gc.h	(revision 159586)
+++ mono/mini/mini-gc.h	(working copy)
@@ -7,6 +7,4 @@
 
 void mini_gc_init_cfg (MonoCompile *cfg) MONO_INTERNAL;
 
-void mini_gc_create_gc_map (MonoCompile *cfg) MONO_INTERNAL;
-
 #endif
Index: mono/mini/driver.c
===================================================================
--- mono/mini/driver.c	(revision 159586)
+++ mono/mini/driver.c	(working copy)
@@ -55,6 +55,7 @@
 #include <locale.h>
 #include "version.h"
 #include "debugger-agent.h"
+#include "mini-gc.h"
 
 static FILE *mini_stats_fd = NULL;
 
@@ -1639,6 +1640,13 @@
 	}
 #endif
 
+	/* 
+	 * This needs to be called before mono_gc_base_init. It is not sufficient to call it from
+	 * mini_init - the callbacks don't register in time and the code in mini-gc.c stays
+	 * unaware of the first thread.
+	 */ 
+	mini_gc_init ();
+
 	/*
 	 * This must be called before mono_debug_init(), because the
 	 * latter registers GC roots.
Index: mono/arch/x86/x86-codegen.h
===================================================================
--- mono/arch/x86/x86-codegen.h	(revision 159586)
+++ mono/arch/x86/x86-codegen.h	(working copy)
@@ -2003,6 +2003,12 @@
 		x86_reg_emit ((inst), (dreg), (sreg));	\
 	} while (0)
 
+#define x86_int_trap(inst) \
+	do { \
+		*(inst)++ = (unsigned char) 0xCC; \
+	} while (0)
+ 
+#define INT_TRAP_INSTRUCTION_BYTE (0xCC)
 
 #define x86_movd_reg_xreg(inst,dreg,sreg)	\
 	do {	\
@@ -2048,7 +2054,5 @@
 		x86_sse_alu_pd_reg_reg (inst, opc, dreg, sreg);	\
 	} while (0)
 
-
-
 #endif // X86_H
 

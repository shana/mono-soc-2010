Implements safe points by code-patching.

Index: mono/mono/metadata/gc-internal.h
===================================================================
--- mono.orig/mono/metadata/gc-internal.h	2010-07-09 02:18:48.000000000 +0530
+++ mono/mono/metadata/gc-internal.h	2010-07-09 02:19:36.000000000 +0530
@@ -176,9 +176,38 @@
 /* helper for the managed alloc support */
 MonoString *mono_string_alloc (int length) MONO_INTERNAL;
 
+/*
+ * Called to signify that the current thread is ready to be suspended for
+ * collection (i.e. is at a consistent state).
+ */
+void mono_sgen_thread_ready_to_suspend (gpointer sigctx) MONO_INTERNAL;
+
 /* 
  * Functions supplied by the runtime and called by the GC. Currently only used
- * by SGEN.
+ * by SGen.
+ *
+ * When stopping the world, the callbacks need to be invoked thus:
+ *
+ * thread_collector_initiate_parking_func: In the beginning of the stop_world routine.
+ *
+ * thread_mutator_suspend_func: From all the mutator threads, once the above has been
+ * executed.
+ *
+ * thread_collector_suspend_func: From the collector thread, once the above has been
+ * executed for that particular thread.
+ *
+ * thread_mutator_suspend_now: Suspends the mutator from which this is called. This may
+ * either be directly through a call to mono_sgen_thread_ready_to_suspend or through
+ * an indirect call to mono_sgen_thread_ready_to_suspend once the thread is at a safe point.
+ *
+ * thread_collector_dissolve_parking_func: From the collector thread, once all threads have
+ * stopped.
+ *
+ * thread_collector_restart_func: From the collector thread, once for each thread, when the
+ * collection is over.
+ *
+ * thread_mutator_restart_func: From the mutator thread, before just before restarting.
+ *
  */
 typedef struct {
 	/* 
@@ -186,23 +215,23 @@
 	 * needed by the other functions.
 	 */
 	gpointer (*thread_attach_func) (void);
-	/* FIXME: Add a cleanup function too */
-	/* 
-	 * Function called from every thread when suspending for GC. It can save
-	 * data needed for marking from thread stacks. user_data is the data returned 
-	 * by attach_func. This might called with GC locks held and the word stopped,
-	 * so it shouldn't do any synchronization etc.
-	 */
-	void (*thread_suspend_func) (gpointer user_data, void *sigcontext);
-	/* 
-	 * Function called to mark from thread stacks. user_data is the data returned 
-	 * by attach_func. This is called twice, with the word stopped:
-	 * - in the first pass, it should mark areas of the stack using
-	 *   conservative marking by calling mono_gc_conservatively_scan_area ().
-	 * - in the second pass, it should mark the remaining areas of the stack
-	 *   using precise marking by calling mono_gc_scan_object ().
+
+	void (*thread_collector_initiate_parking_func) (void);
+
+	void (*thread_mutator_suspend_func) (gpointer user_data, gpointer sigctx);
+	void (*thread_collector_suspend_func) (gpointer user_data);
+
+	void (*thread_mutator_suspend_now) (gpointer user_data);
+
+	void (*thread_collector_dissolve_parking_func) (void);
+
+	void (*thread_collector_restart_func) (gpointer user_data);
+	void (*thread_mutator_restart_func) (gpointer user_data);
+
+	/*
+	 * Function called during thread detach.
 	 */
-	void (*thread_mark_func) (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise);
+	void (*thread_detach_func) (gpointer user_data);
 } MonoGCCallbacks;
 
 /* Set the callback functions callable by the GC */
Index: mono/mono/metadata/sgen-archdep.h
===================================================================
--- mono.orig/mono/metadata/sgen-archdep.h	2010-07-09 02:18:48.000000000 +0530
+++ mono/mono/metadata/sgen-archdep.h	2010-07-09 02:19:36.000000000 +0530
@@ -61,6 +61,9 @@
 
 #define REDZONE_SIZE	128
 
+/* Define this to use GC safe points. */
+#define MONO_GC_SAFE_POINTS 1
+
 #define ARCH_NUM_REGS 15	/* we're never storing RSP */
 #define ARCH_STORE_REGS(ptr)	\
 	__asm__ __volatile__(	\
Index: mono/mono/metadata/sgen-gc.c
===================================================================
--- mono.orig/mono/metadata/sgen-gc.c	2010-07-09 02:19:10.000000000 +0530
+++ mono/mono/metadata/sgen-gc.c	2010-07-09 02:19:36.000000000 +0530
@@ -5185,8 +5185,14 @@
 
 #if USE_SIGNAL_BASED_START_STOP_WORLD
 
-static MonoSemType suspend_ack_semaphore;
-static MonoSemType *suspend_ack_semaphore_ptr;
+static MonoSemType ack_semaphore_a;
+static MonoSemType *ack_semaphore_a_ptr;
+
+#ifdef MONO_GC_SAFE_POINTS
+static MonoSemType ack_semaphore_b;
+static MonoSemType *ack_semaphore_b_ptr;
+#endif
+
 static unsigned int global_stop_count = 0;
 
 static sigset_t suspend_signal_mask;
@@ -5222,8 +5228,6 @@
 	g_assert (info->stack_start >= info->stack_start_limit && info->stack_start < info->stack_end);
 	ARCH_STORE_REGS (ptr);
 	info->stopped_regs = ptr;
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, NULL);
 }
 
 /*
@@ -5241,8 +5245,10 @@
 #endif
 #endif
 
+#ifndef MONO_GC_SAFE_POINTS
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip);
+#endif
 
 void
 mono_sgen_wait_for_suspend_ack (int count)
@@ -5250,7 +5256,7 @@
 	int i, result;
 
 	for (i = 0; i < count; ++i) {
-		while ((result = MONO_SEM_WAIT (suspend_ack_semaphore_ptr)) != 0) {
+		while ((result = MONO_SEM_WAIT (ack_semaphore_a_ptr)) != 0) {
 			if (errno != EINTR) {
 				g_error ("sem_wait ()");
 			}
@@ -5258,6 +5264,8 @@
 	}
 }
 
+#ifndef MONO_GC_SAFE_POINTS
+
 static int
 restart_threads_until_none_in_managed_allocator (void)
 {
@@ -5347,50 +5355,41 @@
 	return num_threads_died;
 }
 
-/* LOCKING: assumes the GC lock is held (by the stopping thread) */
-static void
-suspend_handler (int sig, siginfo_t *siginfo, void *context)
+#endif /* ! MONO_GC_SAFE_POINTS */
+
+void
+mono_sgen_thread_ready_to_suspend (gpointer sigctx)
 {
-	SgenThreadInfo *info;
-	pthread_t id;
-	int stop_count;
-	int old_errno = errno;
+	SgenThreadInfo *info = mono_sgen_thread_info_lookup (ARCH_GET_THREAD ());
 	gpointer regs [ARCH_NUM_REGS];
 	gpointer stack_start;
+	int stop_count = global_stop_count;
+	int old_errno = errno;
 
-	id = pthread_self ();
-	info = mono_sgen_thread_info_lookup (id);
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_domain = mono_domain_get ();
-	info->stopped_ip = (gpointer) ARCH_SIGCTX_IP (context);
-	stop_count = global_stop_count;
-	/* duplicate signal */
-	if (0 && info->stop_count == stop_count) {
-		errno = old_errno;
-		return;
-	}
+	info->stopped_ip = ARCH_SIGCTX_IP (sigctx);
+#endif
+
 #ifdef HAVE_KW_THREAD
 	/* update the remset info in the thread data structure */
 	info->remset = remembered_set;
 #endif
-	stack_start = (char*) ARCH_SIGCTX_SP (context) - REDZONE_SIZE;
+	stack_start = (char*) ARCH_SIGCTX_SP (sigctx) - REDZONE_SIZE;
 	/* If stack_start is not within the limits, then don't set it
 	   in info and we will be restarted. */
 	if (stack_start >= info->stack_start_limit && info->stack_start <= info->stack_end) {
 		info->stack_start = stack_start;
 
-		ARCH_COPY_SIGCTX_REGS (regs, context);
+		ARCH_COPY_SIGCTX_REGS (regs, sigctx);
 		info->stopped_regs = regs;
 	} else {
 		g_assert (!info->stack_start);
 	}
 
-	/* Notify the JIT */
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, context);
-
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
 	info->stop_count = stop_count;
 
 	/* wait until we receive the restart signal */
@@ -5399,13 +5398,32 @@
 		sigsuspend (&suspend_signal_mask);
 	} while (info->signal != restart_signal_num);
 
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_mutator_restart_func (info->runtime_data);
+#endif
+
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
 
 	errno = old_errno;
 }
 
+/* LOCKING: assumes the GC lock is held (by the stopping thread) */
+static void
+suspend_handler (int sig, siginfo_t *siginfo, void *sigctx)
+{
+#ifdef MONO_GC_SAFE_POINTS
+	SgenThreadInfo *info = mono_sgen_thread_info_lookup (ARCH_GET_THREAD ());
+	gc_callbacks.thread_mutator_suspend_func (info->runtime_data, sigctx);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
+	MONO_SEM_WAIT (ack_semaphore_b_ptr);
+	gc_callbacks.thread_mutator_suspend_now (info->runtime_data);
+#else
+	mono_sgen_thread_ready_to_suspend (sigctx);
+#endif
+}
+
 static void
 restart_handler (int sig)
 {
@@ -5438,17 +5456,39 @@
 static int
 stop_world (void)
 {
-	int count;
+	int count, i;
+	SgenThreadInfo *info;
+	ARCH_THREAD_TYPE me = ARCH_GET_THREAD ();
 
 	acquire_gc_locks ();
 
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_collector_initiate_parking_func ();
+#endif
+
 	update_current_thread_stack (&count);
 
 	global_stop_count++;
-	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, mono_sgen_thread_info_lookup (ARCH_GET_THREAD ()), (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, mono_sgen_thread_info_lookup (me), (gpointer) me));
 	TV_GETTIME (stop_world_time);
 	count = mono_sgen_thread_handshake (suspend_signal_num);
+#ifdef MONO_GC_SAFE_POINTS
+
+	/* Patch the required places. */
+	for (i = 0; i < THREAD_HASH_SIZE; i++)
+		for (info = thread_table [i]; info; info = info->next)
+			if (!ARCH_THREAD_EQUALS (info->id, me))
+				gc_callbacks.thread_collector_suspend_func (info->runtime_data);
+
+	/* Signal the waiting threads to start. */
+	for (i = 0; i < count; i++)
+		MONO_SEM_POST (ack_semaphore_b_ptr);
+
+	mono_sgen_wait_for_suspend_ack (count);
+	gc_callbacks.thread_collector_dissolve_parking_func ();
+#else
 	count -= restart_threads_until_none_in_managed_allocator ();
+#endif
 	g_assert (count >= 0);
 	DEBUG (3, fprintf (gc_debug_file, "world stopped %d thread(s)\n", count));
 	return count;
@@ -5460,6 +5500,7 @@
 {
 	int count, i;
 	SgenThreadInfo *info;
+	ARCH_THREAD_TYPE me = ARCH_GET_THREAD ();
 	TV_DECLARE (end_sw);
 	unsigned long usec;
 
@@ -5472,6 +5513,10 @@
 	}
 	for (i = 0; i < THREAD_HASH_SIZE; ++i) {
 		for (info = thread_table [i]; info; info = info->next) {
+#ifdef MONO_GC_SAFE_POINTS
+			if (!ARCH_THREAD_EQUALS (info->id, me))
+				gc_callbacks.thread_collector_restart_func (info->runtime_data);
+#endif
 			info->stack_start = NULL;
 			info->stopped_regs = NULL;
 		}
@@ -5539,9 +5584,7 @@
 				continue;
 			}
 			DEBUG (3, fprintf (gc_debug_file, "Scanning thread %p, range: %p-%p, size: %td, pinned=%d\n", info, info->stack_start, info->stack_end, (char*)info->stack_end - (char*)info->stack_start, next_pin_slot));
-			if (gc_callbacks.thread_mark_func && !conservative_stack_mark)
-				gc_callbacks.thread_mark_func (info->runtime_data, info->stack_start, info->stack_end, precise);
-			else if (!precise)
+			if (!precise)
 				conservatively_pin_objects_from (info->stack_start, info->stack_end, start_nursery, end_nursery, PIN_TYPE_STACK);
 
 			if (!precise)
@@ -5962,8 +6005,10 @@
 	info->tlab_real_end_addr = &TLAB_REAL_END;
 	info->store_remset_buffer_addr = &STORE_REMSET_BUFFER;
 	info->store_remset_buffer_index_addr = &STORE_REMSET_BUFFER_INDEX;
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_ip = NULL;
 	info->stopped_domain = NULL;
+#endif
 	info->stopped_regs = NULL;
 
 	binary_protocol_thread_register ((gpointer)info->id);
@@ -6052,6 +6097,9 @@
 		prev = p;
 		p = p->next;
 	}
+#ifdef MONO_GC_SAFE_POINTS
+	gc_callbacks.thread_detach_func (p->runtime_data);
+#endif
 	if (prev == NULL) {
 		thread_table [hash] = p->next;
 	} else {
@@ -7157,8 +7205,12 @@
 		g_strfreev (opts);
 	}
 
-	suspend_ack_semaphore_ptr = &suspend_ack_semaphore;
-	MONO_SEM_INIT (&suspend_ack_semaphore, 0);
+	ack_semaphore_a_ptr = &ack_semaphore_a;
+	MONO_SEM_INIT (&ack_semaphore_a, 0);
+#ifdef MONO_GC_SAFE_POINTS
+	ack_semaphore_b_ptr = &ack_semaphore_b;
+	MONO_SEM_INIT (&ack_semaphore_b, 0);
+#endif
 
 	sigfillset (&sinfo.sa_mask);
 	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
@@ -7458,28 +7510,36 @@
 static MonoMethod* alloc_method_cache [ATYPE_NUM];
 static MonoMethod *write_barrier_method;
 
+gboolean
+mono_sgen_is_inconsistent_method (MonoMethod *method)
+{
+	int i;
+	if (method == write_barrier_method)
+		return TRUE;
+	for (i = 0; i < ATYPE_NUM; ++i)
+		if (method == alloc_method_cache [i])
+			return TRUE;
+	return FALSE;
+}
+
+#ifndef MONO_GC_SAFE_POINTS
+
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip)
 {
 	MonoJitInfo *ji;
-	MonoMethod *method;
-	int i;
 
 	if (!ip || !domain)
 		return FALSE;
 	ji = mono_jit_info_table_find (domain, ip);
 	if (!ji)
 		return FALSE;
-	method = ji->method;
 
-	if (method == write_barrier_method)
-		return TRUE;
-	for (i = 0; i < ATYPE_NUM; ++i)
-		if (method == alloc_method_cache [i])
-			return TRUE;
-	return FALSE;
+	return mono_sgen_is_inconsistent_method (ji->method);
 }
 
+#endif
+
 /*
  * Generate an allocator method implementing the fast path of mono_gc_alloc_obj ().
  * The signature of the called method is:
Index: mono/mono/metadata/sgen-gc.h
===================================================================
--- mono.orig/mono/metadata/sgen-gc.h	2010-07-09 02:19:10.000000000 +0530
+++ mono/mono/metadata/sgen-gc.h	2010-07-09 04:39:41.000000000 +0530
@@ -44,6 +44,9 @@
 typedef guint64 mword;
 #endif
 
+/*#define DEBUG_SAFE_POINTS(...) fprintf (stderr, __VA_ARGS__);*/
+#define DEBUG_SAFE_POINTS(...)
+
 /* for use with write barriers */
 typedef struct _RememberedSet RememberedSet;
 struct _RememberedSet {
@@ -74,8 +77,10 @@
 	long *store_remset_buffer_index_addr;
 	RememberedSet *remset;
 	gpointer runtime_data;
+#ifndef MONO_GC_SAFE_POINTS /* Not required if safe points are used. */
 	gpointer stopped_ip;	/* only valid if the thread is stopped */
 	MonoDomain *stopped_domain; /* ditto */
+#endif
 	gpointer *stopped_regs;	    /* ditto */
 #ifndef HAVE_KW_THREAD
 	char *tlab_start;
@@ -146,5 +151,8 @@
 	INTERNAL_MEM_MAX
 };
 
+/* Returns FALSE if a thread cannot stop safely inside the passed method. */
+gboolean mono_sgen_is_inconsistent_method (MonoMethod *) MONO_INTERNAL;
+
 #endif /* __MONO_SGENGC_H__ */
 
Index: mono/mono/mini/driver.c
===================================================================
--- mono.orig/mono/mini/driver.c	2010-07-09 02:18:48.000000000 +0530
+++ mono/mono/mini/driver.c	2010-07-09 02:19:36.000000000 +0530
@@ -55,6 +55,7 @@
 #include <locale.h>
 #include "version.h"
 #include "debugger-agent.h"
+#include "mini-gc.h"
 
 static FILE *mini_stats_fd = NULL;
 
@@ -1650,6 +1651,13 @@
 #endif
 
 	/*
+	 * This needs to be called before mono_gc_base_init. It is not sufficient to call it from
+	 * mini_init - the callbacks don't register in time and the code in mini-gc.c stays
+	 * unaware of the first thread.
+	 */
+	mini_gc_init ();
+
+	/*
 	 * This must be called before mono_debug_init(), because the
 	 * latter registers GC roots.
 	 */
Index: mono/mono/mini/mini-gc.c
===================================================================
--- mono.orig/mono/mini/mini-gc.c	2010-07-09 02:19:09.000000000 +0530
+++ mono/mono/mini/mini-gc.c	2010-07-09 04:39:11.000000000 +0530
@@ -3,13 +3,319 @@
  *
  * Author:
  *   Zoltan Varga (vargaz@gmail.com)
+ *   Sanjoy Das (sanjoy@playingwithpointers.com)
  *
  * Copyright 2009 Novell, Inc (http://www.novell.com)
  */
 
-#include "config.h"
-#include "mini-gc.h"
 #include <mono/metadata/gc-internal.h>
+#include <mono/mini/mini-gc.h>
+
+#ifdef HAVE_SGEN_GC
+
+#include <mono/io-layer/wapi.h>
+#include <mono/metadata/sgen-archdep.h>
+#include <mono/metadata/sgen-gc.h>
+
+
+#ifdef MONO_GC_SAFE_POINTS
+
+typedef struct {
+	gpointer ip, prev_instruction;
+	struct SafePointIPInfo *next;
+} SafePointIPInfo;
+
+typedef struct {
+	/*
+	 * The various instructions that were patched and their locations.
+	 */
+	SafePointIPInfo *safe_point_info;
+
+	gpointer sigctx;
+	int thread_state;
+} TlsJitInfo;
+
+enum {
+	THREAD_RUNNING,
+	THREAD_PARKED_AT_SAFE_POINT,
+	THREAD_PARKED_FORCED
+};
+
+typedef gboolean (*ForEachStackFrameFunc) (MonoJitInfo * /* Jit info */, MonoContext *, int /* counter */, gpointer /* user_data */);
+
+static void
+for_each_stack_frame (gpointer sigctx, ForEachStackFrameFunc func, gpointer user_data)
+{
+	MonoDomain *domain = mono_domain_get ();
+	MonoJitTlsData *jit_tls = TlsGetValue (mono_get_jit_tls_key ());
+	MonoLMF *lmf = mono_get_lmf ();
+	MonoContext ctx, new_ctx;
+	MonoJitInfo *ji, rji;
+
+	int counter = 0;
+	MonoMethod *last_method = NULL;
+	mono_arch_sigctx_to_monoctx (sigctx, &ctx);
+
+	g_assert (MONO_CONTEXT_GET_IP (&ctx) == ARCH_SIGCTX_IP (sigctx));
+
+	while (1) {
+		ji = mono_find_jit_info (domain, jit_tls, &rji, NULL, &ctx, &new_ctx, NULL, &lmf, NULL, NULL);
+		if (!ji || ji == (gpointer)-1 || MONO_CONTEXT_GET_SP (&ctx) >= jit_tls->end_of_stack)
+			break;
+
+		/*
+		 * See mini-exceptions.c : ves_icall_get_frame_info for an explanation
+		 */
+		if (ji->method->wrapper_type == MONO_WRAPPER_MANAGED_TO_NATIVE && ji->method == last_method)
+			continue;
+		last_method = ji->method;
+
+		if (!func (ji, &ctx, counter, user_data))
+			break;
+		ctx = new_ctx;
+		counter++;
+	}
+}
+
+static gpointer
+thread_attach (void)
+{
+	return g_malloc0 (sizeof (TlsJitInfo));
+}
+
+static void
+int_3_handler (int sig, siginfo_t *siginfo, void *context)
+{
+	mono_arch_patch_safe_point_context (context);
+	mono_sgen_thread_ready_to_suspend (context);
+}
+
+static void
+gc_exception_callback (gpointer sigctx)
+{
+	mono_sgen_thread_ready_to_suspend (sigctx);
+}
+
+static struct sigaction prev_sigaction_info;
+
+static void
+thread_collector_initiate_parking (void)
+{
+	struct sigaction sinfo;
+	sigfillset (&sinfo.sa_mask);
+	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
+	sinfo.sa_sigaction = int_3_handler;
+	if (sigaction (SIGTRAP, &sinfo, &prev_sigaction_info) != 0)
+		g_error ("failed sigaction to set int_3_handler");
+	mono_arch_install_exception_callback (gc_exception_callback);
+}
+
+static void
+thread_collector_dissolve_parking (void)
+{
+	if (sigaction (SIGTRAP, &prev_sigaction_info, NULL) != 0)
+		g_error ("failed sigaction to unset int_3_handler");
+	mono_arch_install_exception_callback (NULL);
+}
+
+static gboolean
+iterate_find_safe_point_ip (MonoJitInfo *ji, MonoContext *ctx, int counter, gpointer user_data)
+{
+	MonoGCInfo *gc_info = ji->gc_info;
+	MonoSafePointJitInfo *safe_points = gc_info->safe_points;
+	gpointer native_ip = MONO_CONTEXT_GET_IP (ctx);
+	int i;
+	SafePointIPInfo *head = NULL, *iterator = NULL;
+
+	/*
+	 * Checking mono_sgen_is_inconsistent_method is better than imposing some arbitrary restriction
+	 * on managed allocators and write barriers.
+	 *
+	 * Backward jump safe points are not counted in when the method is inconsistent.
+	 */
+	gboolean inconsistent = mono_sgen_is_inconsistent_method (ji->method);
+
+	g_assert (native_ip >= ji->code_start);
+
+#define ADD_IP(ip_to_add) \
+	do { \
+		iterator = mono_sgen_get_internal_mem (sizeof (SafePointIPInfo), INTERNAL_MEM_SAFE_POINTS); \
+		iterator->ip = (ip_to_add); \
+		iterator->next = head; \
+		head = iterator; \
+	} while (0)
+
+	for (i = 0; i < gc_info->safe_points_len; i++) {
+		if (safe_points [i].reason == SAFE_POINT_TYPE_RETURN) {
+			ADD_IP ((gpointer) (safe_points [i].native_offset + ji->code_start));
+			DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+		} else if (!inconsistent && safe_points [i].reason == SAFE_POINT_TYPE_BACKWARD_BRANCH) {
+			if ((safe_points [i].native_offset + ji->code_start) >= native_ip) {
+				ADD_IP ((gpointer) (safe_points [i].native_offset + ji->code_start));
+				DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+			}
+		} else if (safe_points [i].reason == SAFE_POINT_TYPE_METHOD_CALL) {
+			ADD_IP ((gpointer) (safe_points [i].native_offset + ji->code_start));
+			DEBUG_SAFE_POINTS ("%s ", mono_jit_safe_point_descr (&(safe_points [i])));
+		}
+	}
+
+#undef ADD_IP
+
+	DEBUG_SAFE_POINTS ("\n");
+
+	*((SafePointIPInfo **) user_data) = head;
+
+	return FALSE;
+}
+
+enum {
+	CAS_LOCKED,
+	CAS_UNLOCKED
+};
+
+volatile static int cas_lock = CAS_UNLOCKED;
+
+static void
+thread_mutator_suspend (gpointer user_data, gpointer context)
+{
+	MonoDomain *domain = mono_domain_get ();
+	TlsJitInfo *tls = user_data;
+
+	tls->thread_state = THREAD_RUNNING;
+	tls->sigctx = context;
+
+	/*
+	 * This is possible since SET_CURRENT_OBJECT (null) is
+	 * executed before a thread terminates - a thread
+	 * is alive for a short while (and hence may be suspended)
+	 * after SET_CURRENT_OBJECT (null) has been called.
+	 */
+	if (!mono_thread_internal_current ()) {
+		DEBUG_SAFE_POINTS ("mono_thread_internal_current () returned NULL");
+		tls->thread_state = THREAD_PARKED_FORCED;
+		return;
+	}
+
+	if (!mono_jit_info_table_find (domain, (char *) ARCH_SIGCTX_IP (context))) {
+		tls->thread_state = THREAD_PARKED_FORCED;
+		return;
+	}
+
+	/*
+	 * This is needed because mono_sgen_get_internal_mem is not thread safe. A mutex
+	 * cannot be used since this function may be called from a signal handler.
+	 * This may be done before every call to mono_sgen_get_internal_mem, but I'm not
+	 * sure if so many CAS's would be a good idea.
+	 */
+	while (InterlockedCompareExchange (&cas_lock, CAS_LOCKED, CAS_UNLOCKED) == CAS_LOCKED)
+		g_usleep (1);
+
+	for_each_stack_frame (context, iterate_find_safe_point_ip, &tls->safe_point_info);
+
+	cas_lock = CAS_UNLOCKED;
+}
+
+static void
+thread_collector_suspend (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
+	SafePointIPInfo *iter;
+
+	if (tls->thread_state == THREAD_PARKED_FORCED)
+		return;
+
+	DEBUG_SAFE_POINTS ("Patching instructions.\n");
+	for (iter = tls->safe_point_info; iter; iter = iter->next)
+		iter->prev_instruction = mono_arch_emit_safe_point (iter->ip);
+
+	tls->thread_state = THREAD_PARKED_AT_SAFE_POINT;
+
+	DEBUG_SAFE_POINTS ("Patched thread %p.\n", (gpointer) pthread_self ());
+}
+
+static void
+thread_mutator_suspend_now (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
+
+	if (tls->thread_state == THREAD_PARKED_FORCED)
+		mono_sgen_thread_ready_to_suspend (tls->sigctx);
+}
+
+static void
+thread_collector_restart (gpointer user_data)
+{
+	TlsJitInfo *tls = user_data;
+
+	g_assert (tls->thread_state != THREAD_RUNNING);
+
+	/* See thread_mutator_suspend */
+	while (InterlockedCompareExchange (&cas_lock, CAS_LOCKED, CAS_UNLOCKED) == CAS_LOCKED)
+		g_usleep (1);
+
+	if (tls->thread_state == THREAD_PARKED_AT_SAFE_POINT) {
+		SafePointIPInfo *iter = NULL, *tmp = NULL;
+		for (iter = tls->safe_point_info; iter; ) {
+			mono_arch_clear_safe_point (iter->ip, iter->prev_instruction);
+			tmp = iter->next;
+			mono_sgen_free_internal_mem (iter, INTERNAL_MEM_SAFE_POINTS);
+			iter = tmp;
+		}
+	}
+
+	cas_lock = CAS_UNLOCKED;
+
+	tls->thread_state = THREAD_RUNNING;
+	tls->sigctx = NULL;
+}
+
+static void
+thread_mutator_restart (gpointer user_data)
+{
+	/*
+	 * Not needed now, kept around with the hope that this will be required later.
+	 * Will remove it if not.
+	 */
+}
+
+static void
+thread_detach (gpointer user_data)
+{
+	g_assert (user_data);
+	g_free (user_data);
+}
+
+#endif /* MONO_GC_SAFE_POINTS */
+
+void
+mini_gc_init (void)
+{
+	MonoGCCallbacks cb;
+
+	memset (&cb, 0, sizeof (cb));
+#ifdef MONO_GC_SAFE_POINTS
+	cb.thread_attach_func = thread_attach;
+	cb.thread_collector_initiate_parking_func = thread_collector_initiate_parking;
+	cb.thread_mutator_suspend_func = thread_mutator_suspend;
+	cb.thread_collector_suspend_func = thread_collector_suspend;
+	cb.thread_mutator_suspend_now = thread_mutator_suspend_now;
+	cb.thread_collector_dissolve_parking_func = thread_collector_dissolve_parking;
+	cb.thread_collector_restart_func = thread_collector_restart;
+	cb.thread_mutator_restart_func = thread_mutator_restart;
+	cb.thread_detach_func = thread_detach;
+#endif
+	mono_gc_set_gc_callbacks (&cb);
+}
+
+#else
+
+void
+mini_gc_init (void)
+{
+}
+
+#endif /* HAVE_SGEN_GC */
 
 /*
  * mini_gc_init_cfg:
Index: mono/mono/mini/mini-gc.h
===================================================================
--- mono.orig/mono/mini/mini-gc.h	2010-07-09 02:19:09.000000000 +0530
+++ mono/mono/mini/mini-gc.h	2010-07-09 02:19:39.000000000 +0530
@@ -4,5 +4,6 @@
 #include "mini.h"
 
 void mini_gc_init_cfg (MonoCompile *cfg) MONO_INTERNAL;
+void mini_gc_init (void) MONO_INTERNAL;
 
 #endif

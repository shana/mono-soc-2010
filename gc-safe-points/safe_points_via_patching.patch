Index: mono/metadata/sgen-gc.c
===================================================================
--- mono/metadata/sgen-gc.c	(revision 158880)
+++ mono/metadata/sgen-gc.c	(working copy)
@@ -205,7 +205,6 @@
 #include "utils/mono-time.h"
 #include "utils/mono-semaphore.h"
 #include "utils/mono-counters.h"
-
 #include <mono/utils/memcheck.h>
 
 #define OPDEF(a,b,c,d,e,f,g,h,i,j) \
@@ -409,6 +408,14 @@
 
 #define SIZEOF_GC_MEM_SECTION	((sizeof (GCMemSection) + 7) & ~7)
 
+#ifdef MONO_GC_SAFE_POINTS
+
+static GPtrArray *bl_methods = NULL;
+
+static void gc_safe_points_setup (void);
+
+#endif
+
 /* Pinned objects are allocated in the LOS space if bigger than half a page
  * or from freelists otherwise. We assume that pinned objects are relatively few
  * and they have a slow dying speed (like interned strings, thread objects).
@@ -852,8 +859,10 @@
 	long *store_remset_buffer_index_addr;
 	RememberedSet *remset;
 	gpointer runtime_data;
+#ifndef MONO_GC_SAFE_POINTS /* Not needed if safe points are being used. */
 	gpointer stopped_ip;	/* only valid if the thread is stopped */
 	MonoDomain *stopped_domain; /* ditto */
+#endif
 	gpointer *stopped_regs;	    /* ditto */
 #ifndef HAVE_KW_THREAD
 	char *tlab_start;
@@ -5261,8 +5270,10 @@
 
 #if USE_SIGNAL_BASED_START_STOP_WORLD
 
-static MonoSemType suspend_ack_semaphore;
-static MonoSemType *suspend_ack_semaphore_ptr;
+static MonoSemType ack_semaphore_a;
+static MonoSemType *ack_semaphore_a_ptr;
+static MonoSemType ack_semaphore_b;
+static MonoSemType *ack_semaphore_b_ptr;
 static unsigned int global_stop_count = 0;
 #ifdef __APPLE__
 static int suspend_signal_num = SIGXFSZ;
@@ -5297,8 +5308,6 @@
 	g_assert (info->stack_start >= info->stack_start_limit && info->stack_start < info->stack_end);
 	ARCH_STORE_REGS (ptr);
 	info->stopped_regs = ptr;
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, NULL);
 }
 
 static const char*
@@ -5326,16 +5335,20 @@
 #endif
 #endif
 
+#ifndef MONO_GC_SAFE_POINTS
+
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip);
 
+#endif
+
 static void
-wait_for_suspend_ack (int count)
+wait_for_suspend_ack (int count, MonoSemType *sem_ptr)
 {
 	int i, result;
 
 	for (i = 0; i < count; ++i) {
-		while ((result = MONO_SEM_WAIT (suspend_ack_semaphore_ptr)) != 0) {
+		while ((result = MONO_SEM_WAIT (sem_ptr)) != 0) {
 			if (errno != EINTR) {
 				g_error ("sem_wait ()");
 			}
@@ -5345,7 +5358,7 @@
 
 /* LOCKING: assumes the GC lock is held */
 static int
-thread_handshake (int signum)
+thread_handshake (int signum, MonoSemType *sem_ptr)
 {
 	int count, i, result;
 	SgenThreadInfo *info;
@@ -5354,7 +5367,7 @@
 	count = 0;
 	for (i = 0; i < THREAD_HASH_SIZE; ++i) {
 		for (info = thread_table [i]; info; info = info->next) {
-			DEBUG (4, fprintf (gc_debug_file, "considering thread %p for signal %d (%s)\n", info, signum, signal_desc (signum)));
+			DEBUG (4, fprintf (gc_debug_file, "considering thread %p, %p for signal %d (%s)\n", info, info->id, signum, signal_desc (signum)));
 			if (ARCH_THREAD_EQUALS (info->id, me)) {
 				DEBUG (4, fprintf (gc_debug_file, "Skip (equal): %p, %p\n", (void*)me, (void*)info->id));
 				continue;
@@ -5363,7 +5376,7 @@
 				continue;*/
 			result = pthread_kill (info->id, signum);
 			if (result == 0) {
-				DEBUG (4, fprintf (gc_debug_file, "thread %p signal sent\n", info));
+				DEBUG (4, fprintf (gc_debug_file, "thread %p, %p signal sent\n", info, info->id));
 				count++;
 			} else {
 				DEBUG (4, fprintf (gc_debug_file, "thread %p signal failed: %d (%s)\n", (void*)info->id, result, strerror (result)));
@@ -5372,11 +5385,13 @@
 		}
 	}
 
-	wait_for_suspend_ack (count);
+	wait_for_suspend_ack (count, sem_ptr);
 
 	return count;
 }
 
+#ifndef MONO_GC_SAFE_POINTS
+
 static int
 restart_threads_until_none_in_managed_allocator (void)
 {
@@ -5417,7 +5432,7 @@
 			break;
 
 		/* wait for the threads to signal their restart */
-		wait_for_suspend_ack (restart_count);
+		wait_for_suspend_ack (restart_count, ack_semaphore_a_ptr);
 
 		if (sleep_duration < 0) {
 			sched_yield ();
@@ -5444,38 +5459,49 @@
 		num_threads_died += restart_count - restarted_count;
 		/* wait for the threads to signal their suspension
 		   again */
-		wait_for_suspend_ack (restart_count);
+		wait_for_suspend_ack (restart_count, ack_semaphore_a_ptr);
 	}
 
 	return num_threads_died;
 }
 
-/* LOCKING: assumes the GC lock is held (by the stopping thread) */
+#endif
+
 static void
-suspend_handler (int sig, siginfo_t *siginfo, void *context)
+wait_for_restart_signal (SgenThreadInfo *info)
 {
+	/* wait until we receive the restart signal */
+	do {
+		info->signal = 0;
+		sigsuspend (&suspend_signal_mask);
+	} while (info->signal != restart_signal_num);
+}
+
+/* LOCKING: assumes the GC lock is held (by the stopping thread) */
+void
+mono_gc_thread_ready_to_suspend (void *context)
+{
 	SgenThreadInfo *info;
-	pthread_t id;
 	int stop_count;
 	int old_errno = errno;
 	gpointer regs [ARCH_NUM_REGS];
 	gpointer stack_start;
 
-	id = pthread_self ();
-	info = thread_info_lookup (id);
+	info = thread_info_lookup (ARCH_GET_THREAD ());
+
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_domain = mono_domain_get ();
 	info->stopped_ip = (gpointer) ARCH_SIGCTX_IP (context);
+#endif
+
 	stop_count = global_stop_count;
-	/* duplicate signal */
-	if (0 && info->stop_count == stop_count) {
-		errno = old_errno;
-		return;
-	}
+
 #ifdef HAVE_KW_THREAD
 	/* update the remset info in the thread data structure */
 	info->remset = remembered_set;
 #endif
 	stack_start = (char*) ARCH_SIGCTX_SP (context) - REDZONE_SIZE;
+
 	/* If stack_start is not within the limits, then don't set it
 	   in info and we will be restarted. */
 	if (stack_start >= info->stack_start_limit && info->stack_start <= info->stack_end) {
@@ -5487,35 +5513,60 @@
 		g_assert (!info->stack_start);
 	}
 
-	/* Notify the JIT */
-	if (gc_callbacks.thread_suspend_func)
-		gc_callbacks.thread_suspend_func (info->runtime_data, context);
-
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for suspend from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+#ifdef MONO_GC_SAFE_POINTS
+	MONO_SEM_POST (ack_semaphore_b_ptr);
+#else
+	MONO_SEM_POST (ack_semaphore_a_ptr);
+#endif
 	info->stop_count = stop_count;
 
-	/* wait until we receive the restart signal */
-	do {
-		info->signal = 0;
-		sigsuspend (&suspend_signal_mask);
-	} while (info->signal != restart_signal_num);
+	wait_for_restart_signal (info);
 
-	DEBUG (4, fprintf (gc_debug_file, "Posting suspend_ack_semaphore for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
+	DEBUG (4, fprintf (gc_debug_file, "Posting ack_semaphore_a for resume from %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 	/* notify the waiting thread */
-	MONO_SEM_POST (suspend_ack_semaphore_ptr);
+	MONO_SEM_POST (ack_semaphore_a_ptr);
 
 	errno = old_errno;
+
+#ifdef MONO_GC_SAFE_POINTS
+	g_assert (gc_callbacks.thread_resume_func);
+	gc_callbacks.thread_resume_func (info->runtime_data);
+
+	wait_for_restart_signal (info);
+	MONO_SEM_POST (ack_semaphore_b_ptr);
+#endif
+
 }
 
+/* LOCKING: assumes the GC lock is held (by the stopping thread) */
 static void
+suspend_handler (int sig, siginfo_t *siginfo, void *context)
+{
+#ifdef MONO_GC_SAFE_POINTS
+	SgenThreadInfo *info = thread_info_lookup (ARCH_GET_THREAD ());
+
+	g_assert (gc_callbacks.thread_prepare_park_func);
+
+	MONO_SEM_POST (ack_semaphore_a_ptr);
+	wait_for_restart_signal (info);
+
+	if (!mono_thread_internal_current () ||
+			gc_callbacks.thread_prepare_park_func (thread_info_lookup (ARCH_GET_THREAD ())->runtime_data, context))
+		mono_gc_thread_ready_to_suspend (context);
+#else
+	mono_gc_thread_ready_to_suspend (context);
+#endif
+}
+
+static void
 restart_handler (int sig)
 {
 	SgenThreadInfo *info;
 	int old_errno = errno;
 
-	info = thread_info_lookup (pthread_self ());
+	info = thread_info_lookup (ARCH_GET_THREAD ());
 	info->signal = restart_signal_num;
 	DEBUG (4, fprintf (gc_debug_file, "Restart handler in %p %p\n", info, (gpointer)ARCH_GET_THREAD ()));
 
@@ -5550,8 +5601,15 @@
 	global_stop_count++;
 	DEBUG (3, fprintf (gc_debug_file, "stopping world n %d from %p %p\n", global_stop_count, thread_info_lookup (ARCH_GET_THREAD ()), (gpointer)ARCH_GET_THREAD ()));
 	TV_GETTIME (stop_world_time);
-	count = thread_handshake (suspend_signal_num);
+#ifdef MONO_GC_SAFE_POINTS
+	g_assert (gc_callbacks.thread_initiate_parking);
+	gc_callbacks.thread_initiate_parking (thread_info_lookup (ARCH_GET_THREAD ())->runtime_data);
+	count = thread_handshake (suspend_signal_num, ack_semaphore_a_ptr);
+	g_assert (thread_handshake (restart_signal_num, ack_semaphore_b_ptr) == count);
+#else
+	count = thread_handshake (suspend_signal_num, ack_semaphore_a_ptr);
 	count -= restart_threads_until_none_in_managed_allocator ();
+#endif
 	g_assert (count >= 0);
 	DEBUG (3, fprintf (gc_debug_file, "world stopped %d thread(s)\n", count));
 	return count;
@@ -5582,7 +5640,28 @@
 
 	release_gc_locks ();
 
-	count = thread_handshake (restart_signal_num);
+#ifdef MONO_GC_SAFE_POINTS
+	{
+		ARCH_THREAD_TYPE me = ARCH_GET_THREAD ();
+
+		g_assert (gc_callbacks.thread_dissolve_parking);
+		gc_callbacks.thread_dissolve_parking(thread_info_lookup (me)->runtime_data);
+
+		g_assert (gc_callbacks.thread_resume_prepare_func);
+		for (i = 0; i < THREAD_HASH_SIZE; ++i) {
+			for (info = thread_table [i]; info; info = info->next) {
+				if (ARCH_THREAD_EQUALS (info->id, me))
+					continue;
+				gc_callbacks.thread_resume_prepare_func (info->runtime_data);
+			}
+		}
+	}
+#endif
+
+	count = thread_handshake (restart_signal_num, ack_semaphore_a_ptr);
+#ifdef MONO_GC_SAFE_POINTS
+	g_assert (count == thread_handshake (restart_signal_num, ack_semaphore_b_ptr));
+#endif
 	TV_GETTIME (end_sw);
 	usec = TV_ELAPSED (stop_world_time, end_sw);
 	max_pause_usec = MAX (usec, max_pause_usec);
@@ -6059,8 +6138,10 @@
 	info->tlab_real_end_addr = &TLAB_REAL_END;
 	info->store_remset_buffer_addr = &STORE_REMSET_BUFFER;
 	info->store_remset_buffer_index_addr = &STORE_REMSET_BUFFER_INDEX;
+#ifndef MONO_GC_SAFE_POINTS
 	info->stopped_ip = NULL;
 	info->stopped_domain = NULL;
+#endif
 	info->stopped_regs = NULL;
 
 	binary_protocol_thread_register ((gpointer)info->id);
@@ -7236,9 +7317,16 @@
 		g_strfreev (opts);
 	}
 
-	suspend_ack_semaphore_ptr = &suspend_ack_semaphore;
-	MONO_SEM_INIT (&suspend_ack_semaphore, 0);
+	ack_semaphore_a_ptr = &ack_semaphore_a;
+	MONO_SEM_INIT (&ack_semaphore_a, 0);
 
+	ack_semaphore_b_ptr = &ack_semaphore_b;
+	MONO_SEM_INIT (&ack_semaphore_b, 0);
+
+#ifdef MONO_GC_SAFE_POINTS
+	gc_safe_points_setup ();
+#endif
+
 	sigfillset (&sinfo.sa_mask);
 	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
 	sinfo.sa_sigaction = suspend_handler;
@@ -7490,6 +7578,7 @@
 	/* FIXME: mono_gc_alloc_obj takes a 'size_t' as an argument, not an int32 */
 	mono_mb_emit_ldarg (mb, 0);
 	mono_mb_emit_ldloc (mb, size_var);
+
 	if (atype == ATYPE_NORMAL || atype == ATYPE_SMALL) {
 		mono_mb_emit_icall (mb, mono_gc_alloc_obj);
 	} else if (atype == ATYPE_VECTOR) {
@@ -7537,6 +7626,8 @@
 static MonoMethod* alloc_method_cache [ATYPE_NUM];
 static MonoMethod *write_barrier_method;
 
+#ifndef MONO_GC_SAFE_POINTS
+
 static gboolean
 is_ip_in_managed_allocator (MonoDomain *domain, gpointer ip)
 {
@@ -7559,6 +7650,8 @@
 	return FALSE;
 }
 
+#endif
+
 /*
  * Generate an allocator method implementing the fast path of mono_gc_alloc_obj ().
  * The signature of the called method is:
@@ -7645,8 +7738,12 @@
 
 	mono_loader_lock ();
 	res = alloc_method_cache [atype];
-	if (!res)
-		res = alloc_method_cache [atype] = create_allocator (atype);
+	if (!res) {
+ 		res = alloc_method_cache [atype] = create_allocator (atype);
+#ifdef MONO_GC_SAFE_POINTS
+		mono_gc_blacklist_method_for_safe_pts (res);
+#endif
+	}
 	mono_loader_unlock ();
 	return res;
 #else
@@ -7850,11 +7947,53 @@
 		/* double-checked locking */
 		mono_memory_barrier ();
 		write_barrier_method = res;
+#ifdef MONO_GC_SAFE_POINTS
+		mono_gc_blacklist_method_for_safe_pts (write_barrier_method);
+#endif
 	}
 	mono_loader_unlock ();
 
 	return write_barrier_method;
 }
 
-#endif /* HAVE_SGEN_GC */
+#ifdef MONO_GC_SAFE_POINTS
 
+static void
+gc_safe_points_setup (void)
+{ 
+#ifdef MONO_GC_SAFE_POINTS_METHOD_DEBUG
+	gchar *list_track = getenv ("MONO_GC_SAFE_POINT_TRACK_METHOD");
+	if (list_track)
+		track_methods = g_strsplit (list_track, ",", -1);
+#endif
+
+	bl_methods = g_ptr_array_new ();
+}
+
+void
+mono_gc_blacklist_method_for_safe_pts (MonoMethod *method)
+{
+	int i;
+	for (i = 0; i < bl_methods->len; i++)
+		if (g_ptr_array_index (bl_methods, i) == method)
+			return;
+	g_ptr_array_add (bl_methods, method);
+}
+
+gboolean
+mono_gc_method_blacklisted_for_safe_pts (MonoMethod *method)
+{
+	int i;
+	if (!bl_methods)
+		return FALSE;
+	for (i = 0; i < bl_methods -> len; i++) {
+		if (g_ptr_array_index (bl_methods, i) == method)
+			return TRUE;
+	}
+	return FALSE;
+}
+
+#endif // MONO_GC_SAFE_POINTS
+
+#endif // HAVE_SGEN_GC
+
Index: mono/metadata/sgen-gc.h
===================================================================
--- mono/metadata/sgen-gc.h	(revision 158880)
+++ mono/metadata/sgen-gc.h	(working copy)
@@ -24,6 +24,8 @@
 #ifndef __MONO_SGENGC_H__
 #define __MONO_SGENGC_H__
 
+#include <mono/metadata/metadata.h>
+
 /* pthread impl */
 #include <pthread.h>
 
@@ -46,5 +48,52 @@
 /* we intercept pthread_create calls to know which threads exist */
 #define USE_PTHREAD_INTERCEPT 1
 
+/* Define this to use GC safe points. */
+#define MONO_GC_SAFE_POINTS 1
+
+/* Define this to maintain and print stats about the safe points. */
+//#define MONO_GC_SAFE_POINTS_STATS 1
+
+#ifdef MONO_GC_SAFE_POINTS
+
+/**
+ * Called to blacklist methods which must not have gc-safe points inside them,
+ * either for correctness (viz. wbarrier, managed allocators) or efficiency
+ * (small methods which return quickly).
+ * 
+ * TODO Register the 'small methods which return quickly' from various places 
+ * in codebase.
+ */
+void mono_gc_blacklist_method_for_safe_pts (MonoMethod *method);
+
+gboolean mono_gc_method_blacklisted_for_safe_pts (MonoMethod *method);
+
+/* Used inside in mono_arch_output_basic_block. */
+#define STORE_SAFE_POINT_INFO(cfg, offset, ins) do { \
+	if ((cfg)->compile_aot) \
+		NOT_IMPLEMENTED; \
+	if ((cfg)->safe_points_head == NULL) { \
+		(cfg)->safe_points_head = (cfg)->safe_points_i = mono_mempool_alloc ((cfg)->mempool, sizeof (MonoSafePointCfgInfo)); \
+	} else { \
+		(cfg)->safe_points_i->next = mono_mempool_alloc ((cfg)->mempool, sizeof (MonoSafePointCfgInfo)); \
+		(cfg)->safe_points_i = (cfg)->safe_points_i->next; \
+	} \
+	(cfg)->safe_points_i->reason = (ins)->backend.safe_point_reason; \
+	(cfg)->safe_points_i->native_offset = (offset); \
+	(cfg)->safe_points_num++; \
+} while (0)
+
+//#define DEBUG_SAFE_POINTS(x) do { x; } while (0)
+//#define SAFE_POINT_ASSERTIONS
+#define DEBUG_SAFE_POINTS(x)
+
+#else 
+
+#define STORE_SAFE_POINT_INFO(cfg, offset, ip)
+
+#define DEBUG_SAFE_POINTS(x)
+
+#endif // MONO_GC_SAFE_POINS
+
 #endif /* __MONO_SGENGC_H__ */
 
Index: mono/metadata/gc-internal.h
===================================================================
--- mono/metadata/gc-internal.h	(revision 158880)
+++ mono/metadata/gc-internal.h	(working copy)
@@ -173,6 +173,13 @@
 /* helper for the managed alloc support */
 MonoString *mono_string_alloc (int length) MONO_INTERNAL;
 
+typedef struct {
+	/* Will ultimately be variable sized structure. */
+	int dummy_value;
+	gboolean unmanaged;
+	int stack_start, stack_end;
+} GCStackMap;
+
 /* 
  * Functions supplied by the runtime and called by the GC. Currently only used
  * by SGEN.
@@ -184,22 +191,48 @@
 	 */
 	gpointer (*thread_attach_func) (void);
 	/* FIXME: Add a cleanup function too */
+
 	/* 
 	 * Function called from every thread when suspending for GC. It can save
 	 * data needed for marking from thread stacks. user_data is the data returned 
 	 * by attach_func. This might called with GC locks held and the word stopped,
 	 * so it shouldn't do any synchronization etc.
 	 */
-	void (*thread_suspend_func) (gpointer user_data, void *sigcontext);
+	void (*thread_suspend_func) (gpointer user_data, gpointer context);
+
 	/* 
 	 * Function called to mark from thread stacks. user_data is the data returned 
-	 * by attach_func. This is called twice, with the word stopped:
+	 * by attach_func. This is called twice, with the world stopped:
 	 * - in the first pass, it should mark areas of the stack using
 	 *   conservative marking by calling mono_gc_conservatively_scan_area ().
 	 * - in the second pass, it should mark the remaining areas of the stack
 	 *   using precise marking by calling mono_gc_scan_object ().
 	 */
 	void (*thread_mark_func) (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise);
+
+	void (*thread_initiate_parking) (gpointer user_data);
+
+	void (*thread_dissolve_parking) (gpointer user_data);
+
+	/* Called to prepare a thread for parking. This has to be called from the thread 
+	 * about to be parked. */
+	gboolean (*thread_prepare_park_func) (gpointer user_data, gpointer context);
+
+	/**
+	 * This should be called to make a thread ready to be re-started. This may be called from any thread
+	 * provided the correct user_data is passed.
+	 **/
+	void (*thread_resume_prepare_func) (gpointer user_data);
+
+	/**
+	 * Call from the thread to be resumed. This can only be called when thread_resume_prepare_func
+	 * has been called for *all* threads.
+	 */
+	void (*thread_resume_func) (gpointer user_data);
+
+	/* TODO */
+	void (*thread_detach_func) (gpointer);
+
 } MonoGCCallbacks;
 
 /* Set the callback functions callable by the GC */
@@ -213,6 +246,11 @@
 /* Scan OBJ, returning its new address */
 void *mono_gc_scan_object (void *obj) MONO_INTERNAL;
 
+/**
+ * Called to tell the GC that the thread is ready to be suspended. 
+ **/
+void mono_gc_thread_ready_to_suspend (void *context);
+
 /* Return the bitmap encoded by a descriptor */
 gsize* mono_gc_get_bitmap_for_descr (void *descr, int *numbits) MONO_INTERNAL;
 
Index: mono/mini/method-to-ir.c
===================================================================
--- mono/mini/method-to-ir.c	(revision 158880)
+++ mono/mini/method-to-ir.c	(working copy)
@@ -101,6 +101,31 @@
 /* Determine whenever 'ins' represents a load of the 'this' argument */
 #define MONO_CHECK_THIS(ins) (mono_method_signature (cfg->method)->hasthis && ((ins)->opcode == OP_MOVE) && ((ins)->sreg1 == cfg->args [0]->dreg))
 
+#ifdef MONO_GC_SAFE_POINTS
+
+#define EMIT_GC_SAFE_POINT_MARKER(reas) \
+	do {\
+		if (!cfg->compile_aot && emit_safe_point_polls) \
+			EMIT_GC_SAFE_POINT_MARKER_UNCOND (reas); \
+	} while (0)
+
+#define EMIT_GC_SAFE_POINT_MARKER_UNCOND(reas) \
+	do { \
+		if (!cfg->compile_aot) { \
+			MonoInst *inst; \
+			MONO_INST_NEW (cfg, inst, OP_SAFE_POINT); \
+			inst->backend.safe_point_reason = reas; \
+			MONO_ADD_INS (cfg->cbb, inst); \
+		} \
+	} while (0)
+
+#else
+
+#define EMIT_GC_SAFE_POINT_MARKER(reas)
+#define EMIT_GC_SAFE_POINT_MARKER_UNCOND(reas)
+
+#endif
+
 static int ldind_to_load_membase (int opcode);
 static int stind_to_store_membase (int opcode);
 
@@ -5132,6 +5157,10 @@
 	int context_used;
 	gboolean init_locals, seq_points, skip_dead_blocks;
 
+#ifdef MONO_GC_SAFE_POINTS
+	gboolean emit_safe_point_polls = !mono_gc_method_blacklisted_for_safe_pts (method);
+#endif
+
 	/* serialization and xdomain stuff may need access to private fields and methods */
 	dont_verify = method->klass->image->assembly->corlib_internal? TRUE: FALSE;
 	dont_verify |= method->wrapper_type == MONO_WRAPPER_XDOMAIN_INVOKE;
@@ -5931,6 +5960,8 @@
 			if (mono_security_get_mode () == MONO_SECURITY_MODE_CAS)
 				CHECK_CFG_EXCEPTION;
 
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
+
 #ifdef MONO_ARCH_USE_OP_TAIL_CALL
 			{
 				MonoMethodSignature *fsig = mono_method_signature (cmethod);
@@ -5985,6 +6016,8 @@
 			CHECK_OPSIZE (5);
 			token = read32 (ip + 1);
 
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_METHOD_CALL);
+
 			if (calli) {
 				cmethod = NULL;
 				CHECK_STACK (1);
@@ -6676,6 +6709,7 @@
 			break;
 		case CEE_BR_S:
 			CHECK_OPSIZE (2);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			MONO_INST_NEW (cfg, ins, OP_BR);
 			ip++;
 			target = ip + 1 + (signed char)(*ip);
@@ -6704,6 +6738,7 @@
 		case CEE_BLT_UN_S:
 			CHECK_OPSIZE (2);
 			CHECK_STACK (2);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			MONO_INST_NEW (cfg, ins, *ip + BIG_BRANCH_OFFSET);
 			ip++;
 			target = ip + 1 + *(signed char*)ip;
@@ -6716,6 +6751,7 @@
 			break;
 		case CEE_BR:
 			CHECK_OPSIZE (5);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			MONO_INST_NEW (cfg, ins, OP_BR);
 			ip++;
 
@@ -6746,6 +6782,7 @@
 
 			CHECK_OPSIZE (opsize);
 			CHECK_STACK (1);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			if (sp [-1]->type == STACK_VTYPE || sp [-1]->type == STACK_R8)
 				UNVERIFIED;
 			ip ++;
@@ -6809,6 +6846,7 @@
 		case CEE_BLT_UN:
 			CHECK_OPSIZE (5);
 			CHECK_STACK (2);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			MONO_INST_NEW (cfg, ins, *ip);
 			ip++;
 			target = ip + 4 + (gint32)read32(ip);
@@ -6832,6 +6870,7 @@
 
 			CHECK_OPSIZE (5);
 			CHECK_STACK (1);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_BRANCH);
 			n = read32 (ip + 1);
 			--sp;
 			src1 = sp [0];
@@ -7333,6 +7372,7 @@
 			MonoInst *vtable_arg = NULL;
 
 			CHECK_OPSIZE (5);
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_ALLOCATION);
 			token = read32 (ip + 1);
 			cmethod = mini_get_method (cfg, method, token, NULL, generic_context);
 			if (!cmethod)
@@ -7737,6 +7777,9 @@
 			--sp;
 			val = *sp;
 			CHECK_OPSIZE (5);
+
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_ALLOCATION);
+
 			token = read32 (ip + 1);
 			klass = mini_get_class (method, token, generic_context);
 			CHECK_TYPELOAD (klass);
@@ -8316,6 +8359,8 @@
 			CHECK_OPSIZE (5);
 			token = read32 (ip + 1);
 
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_ALLOCATION);
+
 			klass = mini_get_class (method, token, generic_context);
 			CHECK_TYPELOAD (klass);
 
@@ -8862,6 +8907,8 @@
 				target = ip + 2 + (signed char)(ip [1]);
 			}
 
+			EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_ALLOCATION);
+
 			/* empty the stack */
 			while (sp != stack_start) {
 				sp--;
@@ -8976,6 +9023,8 @@
 				CHECK_STACK (info->sig->param_count);
 				sp -= info->sig->param_count;
 
+				EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_METHOD_CALL);
+
 				ins = mono_emit_jit_icall (cfg, info->func, sp);
 				if (!MONO_TYPE_IS_VOID (info->sig->ret))
 					*sp++ = ins;
@@ -9215,6 +9264,8 @@
 					cfg->dyn_call_var->flags |= MONO_INST_INDIRECT;
 				}
 
+				EMIT_GC_SAFE_POINT_MARKER (SAFE_POINT_IS_METHOD_CALL);
+
 				/* Has to use a call inst since it local regalloc expects it */
 				MONO_INST_NEW_CALL (cfg, call, OP_DYN_CALL);
 				ins = (MonoInst*)call;
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 158880)
+++ mono/mini/mini.c	(working copy)
@@ -39,7 +39,6 @@
 #include <mono/metadata/mono-config.h>
 #include <mono/metadata/environment.h>
 #include <mono/metadata/mono-debug.h>
-#include <mono/metadata/gc-internal.h>
 #include <mono/metadata/threads-types.h>
 #include <mono/metadata/verify.h>
 #include <mono/metadata/verify-internals.h>
@@ -53,6 +52,10 @@
 #include <mono/utils/mono-mmap.h>
 #include <mono/utils/dtrace.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
 #include "mini.h"
 #include "tasklets.h"
 #include <string.h>
@@ -3280,6 +3283,11 @@
 
 	mono_debug_open_method (cfg);
 
+#ifdef MONO_GC_SAFE_POINTS
+	cfg->safe_points_i = cfg->safe_points_head = NULL;
+	cfg->safe_points_num = 0;
+#endif
+
 	/* emit code all basic blocks */
 	for (bb = cfg->bb_entry; bb; bb = bb->next_bb) {
 		bb->native_offset = cfg->code_len;
@@ -3300,6 +3308,10 @@
 			mono_arch_emit_epilog (cfg);
 		}
 	}
+#ifdef MONO_GC_SAFE_POINTS
+	if (cfg->safe_points_i)
+		cfg->safe_points_i->next = NULL; 
+#endif
 
 	mono_arch_emit_exceptions (cfg);
 
@@ -3402,6 +3414,32 @@
 	}
 }
 
+#ifdef MONO_GC_SAFE_POINTS
+static void
+prepare_safe_point_jit_info (MonoJitInfo *jinfo, MonoCompile *cfg)
+{
+	MonoGCInfo *safe_point_set = g_malloc (sizeof (MonoGCInfo));
+	MonoSafePointJitInfo *safe_points = g_malloc (sizeof (MonoSafePointJitInfo) * cfg->safe_points_num);
+	MonoSafePointCfgInfo *i;
+	int counter;
+	safe_point_set->safe_points = safe_points;
+	DEBUG_SAFE_POINTS (fprintf (stderr, "Preparing safe point JIT info for %s.\n", mono_method_full_name (cfg->method, FALSE)));
+	for (counter = 0, i = cfg->safe_points_head; i; i = i->next, counter++) {
+		g_assert (cfg->safe_points_num > counter);
+		safe_points [counter].native_offset = i->native_offset;
+		/* Will ultimately copy the one generated from cfg or generate one directly into the 
+		 * structure. */
+		safe_points [counter].stack_map = g_malloc (sizeof (GCStackMap));
+		safe_points [counter].reason = i->reason;
+		safe_points [counter].id = i->id;
+	}
+	safe_point_set->safe_points_len = cfg->safe_points_num;
+	safe_point_set->frame_register = cfg->frame_reg;
+	jinfo->gc_info = safe_point_set;
+}
+#endif
+
+
 static MonoJitInfo*
 create_jit_info (MonoCompile *cfg, MonoMethod *method_to_compile)
 {
@@ -3639,6 +3677,10 @@
 	}
 #endif
 
+#ifdef MONO_GC_SAFE_POINTS
+	prepare_safe_point_jit_info (jinfo, cfg);
+#endif
+
 	return jinfo;
 }
 #endif
@@ -3917,8 +3959,6 @@
 		cfg->compute_precise_live_ranges = TRUE;
 	}
 
-	mini_gc_init_gc_map (cfg);
-
 	if (COMPILE_LLVM (cfg)) {
 		cfg->opt |= MONO_OPT_ABCREM;
 	}
@@ -4475,8 +4515,6 @@
 
 	mono_save_xdebug_info (cfg);
 
-	mini_gc_create_gc_map (cfg);
- 
 	mono_save_seq_point_info (cfg);
 
 	if (!cfg->compile_aot) {
@@ -5006,8 +5044,24 @@
 	 */
 	mono_jit_info_table_remove (domain, ji->ji);
 
-	if (destroy)
+	if (destroy) {
 		mono_code_manager_destroy (ji->code_mp);
+#ifdef MONO_GC_SAFE_POINTS
+		{
+			MonoGCInfo *safe_point_set = ji->ji->gc_info;
+			MonoSafePointJitInfo *safe_points = safe_point_set->safe_points;
+			int i;
+			for (i = 0; i < safe_point_set->safe_points_len; i++) {
+				/* Will have to eventually write a stack_map_destroy function and probably
+				 * move this block to a separate function too. */
+				g_free (safe_points [i].stack_map);
+			}
+			g_free (safe_points);
+			g_free (safe_point_set);
+			ji->ji->gc_info = NULL;
+		}
+#endif
+	}
 	g_free (ji);
 }
 
@@ -5698,8 +5752,6 @@
 
 	mono_unwind_init ();
 
-	mini_gc_init ();
-
 	if (getenv ("MONO_DEBUG") != NULL)
 		mini_parse_debug_options ();
 
@@ -6283,6 +6335,38 @@
 	g_hash_table_destroy (assemblies);
 }
 
+static const char *
+safe_point_reason_to_string (MonoSafePointReason reason)
+{
+	switch (reason) {
+	case SAFE_POINT_IS_BRANCH:
+		return "BRANCH";
+	case SAFE_POINT_IS_METHOD_CALL:
+		return "METHOD_CALL";
+	case SAFE_POINT_IS_RETURN:
+		return "RETURN";
+	case SAFE_POINT_IS_FORCED:
+		return "FORCED";
+	case SAFE_POINT_IS_ALLOCATION:
+		return "ALLOCATION";
+	}
+	return "UKNOWN";
+}
+
+gchar *
+mono_get_jit_safe_point_descr (MonoSafePointJitInfo *info)
+{
+	return g_strdup_printf ("JIT safe point [NATIVE OFFSET 0x%x] [REASON %s]",
+			info->native_offset, safe_point_reason_to_string (info->reason));
+}
+
+gchar *
+mono_get_cfg_safe_point_descr (MonoSafePointCfgInfo *info)
+{
+	return g_strdup_printf ("CFG safe point [ID %d] [REASON %s]",
+			info->id, safe_point_reason_to_string (info->reason));
+}
+
 #ifndef DISABLE_JIT
 
 void*
Index: mono/mini/mini.h
===================================================================
--- mono/mini/mini.h	(revision 158880)
+++ mono/mini/mini.h	(working copy)
@@ -17,7 +17,12 @@
 #include <mono/metadata/profiler-private.h>
 #include <mono/metadata/debug-helpers.h>
 #include <mono/utils/mono-compiler.h>
+#include <mono/metadata/gc-internal.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
 #define MONO_BREAKPOINT_ARRAY_SIZE 64
 
 /* C type matching the size of a machine register. Not always the same as 'int' */
@@ -443,6 +448,55 @@
 	int offset;
 };
 
+typedef enum {
+	/* TODO Make this more sensible. */
+	SAFE_POINT_IS_BRANCH,
+	SAFE_POINT_IS_METHOD_CALL,
+	SAFE_POINT_IS_RETURN,
+	SAFE_POINT_IS_ALLOCATION,
+	SAFE_POINT_IS_FORCED
+} MonoSafePointReason;
+
+/**
+ * Holds the GC map for a stack frame at a particular safe point.
+ * This is created from the corresponding MonoSafePointCfgInfo structures in 
+ * create_jit_info.
+ **/
+typedef struct {
+	guint native_offset;
+	int id; /* The id of the corresponding MonoSafePointCfgInfo structure. */
+	MonoSafePointReason reason;
+	GCStackMap *stack_map;
+} MonoSafePointJitInfo;
+
+/**
+ * Represents a safe point inside the control flow graph (MonoCompile).
+ **/
+typedef struct MonoSafePointCfgInfo {
+	guint native_offset; /* Offset of the native IP where the corresponding OP_SAFE_POINT
+			     * instruction has been inserted. */
+	int id; /* The unique-within-a-method safe point id. */
+	MonoSafePointReason reason;
+	struct MonoSafePointCfgInfo *next;
+	/* Some more information will likely have to be stored from within mono_arch_output_basic_block
+	 * like the basic block and the actual location of the instruction. Otherwise liveness 
+	 * analysis of the slots might not be possible. Adding more information should be trivial
+	 * though. */
+} MonoSafePointCfgInfo;
+
+/**
+ * A list of all the MonoSafePointJitInfo structures for a particular method
+ * along with some other useful information.
+ **/
+typedef struct {
+	MonoSafePointJitInfo *safe_points;
+	guint32 safe_points_len;
+	int frame_register;
+} MonoGCInfo;
+
+gchar *mono_get_jit_safe_point_descr (MonoSafePointJitInfo *);
+gchar *mono_get_cfg_safe_point_descr (MonoSafePointCfgInfo *);
+
 /*
  * The IR-level extended basic block.  
  *
@@ -653,6 +707,7 @@
 		gboolean record_cast_details; /* For CEE_CASTCLASS */
 		MonoInst *spill_var; /* for OP_ICONV_TO_R8_RAW and OP_FCONV_TO_R8_X */
 		guint16 source_opcode; /*OP_XCONV_R8_TO_I4 needs to know which op was used to do proper widening*/
+		MonoSafePointReason safe_point_reason; /* OP_SAFE_POINT needs this. */
 	} backend;
 	
 	MonoClass *klass;
@@ -1182,6 +1237,11 @@
 	int llvm_this_reg, llvm_this_offset;
 
 	GSList *try_block_holes;
+
+#ifdef MONO_GC_SAFE_POINTS
+	guint32 safe_points_num, safe_points_counter;
+	MonoSafePointCfgInfo *safe_points_head, *safe_points_i;
+#endif
 } MonoCompile;
 
 typedef enum {
@@ -1772,6 +1832,14 @@
 guint8*   mono_arch_emit_load_aotconst          (guint8 *start, guint8 *code, MonoJumpInfo **ji, int tramp_type, gconstpointer target) MONO_INTERNAL;
 GSList*   mono_arch_get_cie_program             (void) MONO_INTERNAL;
 
+#ifdef MONO_GC_SAFE_POINTS
+gpointer mono_arch_emit_safe_point (gpointer ip);
+void mono_arch_clear_safe_point (gpointer ip, gpointer prev);
+void mono_arch_patch_safe_point_context (gpointer sigctx);
+/* TODO There is probably some way to do this already, figure that out. */
+MonoContext mono_arch_mono_context_from_sigctx (gpointer sigctx);
+#endif
+
 /* Soft Debug support */
 #ifdef MONO_ARCH_SOFT_DEBUG_SUPPORTED
 void      mono_arch_set_breakpoint              (MonoJitInfo *ji, guint8 *ip) MONO_INTERNAL;
Index: mono/mini/mini-amd64.c
===================================================================
--- mono/mini/mini-amd64.c	(revision 158880)
+++ mono/mini/mini-amd64.c	(working copy)
@@ -26,6 +26,14 @@
 #include <mono/utils/mono-math.h>
 #include <mono/utils/mono-mmap.h>
 
+#ifdef HAVE_SGEN_GC
+#include <mono/metadata/sgen-gc.h>
+#endif
+
+#ifndef STORE_SAFE_POINT_INFO
+#define STORE_SAFE_POINT_INFO(cfg, offset, ip)
+#endif
+
 #include "trace.h"
 #include "ir-emit.h"
 #include "mini-amd64.h"
@@ -3259,6 +3267,11 @@
 			mono_debug_record_line_number (cfg, ins, offset);
 
 		switch (ins->opcode) {
+#ifdef MONO_GC_SAFE_POINTS
+		case OP_SAFE_POINT: 
+			STORE_SAFE_POINT_INFO (cfg, code - cfg->native_code, ins);
+			break;
+#endif
 		case OP_BIGMUL:
 			amd64_mul_reg (code, ins->sreg2, TRUE);
 			break;
@@ -5567,7 +5580,7 @@
 				   mono_inst_name (ins->opcode), max_len, code - cfg->native_code - offset);
 			g_assert_not_reached ();
 		}
-	       
+       
 		last_ins = ins;
 		last_offset = offset;
 	}
@@ -7710,3 +7723,55 @@
 }
 
 #endif
+
+#ifdef MONO_GC_SAFE_POINTS
+
+gpointer
+mono_arch_emit_safe_point (gpointer ip)
+{
+	guint8 old = *(guint8 *) ip;
+	guint8 *code = ip;
+
+	x86_int_3 (code);
+
+	return (gpointer) old;
+}
+
+void
+mono_arch_clear_safe_point (gpointer ip, gpointer prev)
+{
+	if (((guint8) prev) == INT_3_INSTRUCTION_BYTE)
+		return;
+	*(guint8 *) ip = (guint8) prev;
+}
+
+MonoContext
+mono_arch_mono_context_from_sigctx (gpointer sigctx)
+{
+	MonoContext ctx;
+
+	ctx.rax = UCONTEXT_GREGS (sigctx) [REG_RAX];
+	ctx.rbx = UCONTEXT_GREGS (sigctx) [REG_RBX];
+	ctx.rcx = UCONTEXT_GREGS (sigctx) [REG_RCX];
+	ctx.rdx = UCONTEXT_GREGS (sigctx) [REG_RDX];
+	ctx.rbp = UCONTEXT_GREGS (sigctx) [REG_RBP];
+	ctx.rsp = UCONTEXT_GREGS (sigctx) [REG_RSP];
+	ctx.rsi = UCONTEXT_GREGS (sigctx) [REG_RSI];
+	ctx.rdi = UCONTEXT_GREGS (sigctx) [REG_RDI];
+	ctx.rip = UCONTEXT_GREGS (sigctx) [REG_RIP];
+	ctx.r12 = UCONTEXT_GREGS (sigctx) [REG_R12];
+	ctx.r13 = UCONTEXT_GREGS (sigctx) [REG_R13];
+	ctx.r14 = UCONTEXT_GREGS (sigctx) [REG_R14];
+	ctx.r15 = UCONTEXT_GREGS (sigctx) [REG_R15];
+
+	return ctx;
+}
+
+void
+mono_arch_patch_safe_point_context (gpointer sigctx)
+{
+	UCONTEXT_GREGS (sigctx) [REG_RIP] = UCONTEXT_GREGS (sigctx) [REG_RIP] - 1;
+}
+
+#endif
+
Index: mono/mini/mini-ops.h
===================================================================
--- mono/mini/mini-ops.h	(revision 158880)
+++ mono/mini/mini-ops.h	(working copy)
@@ -26,6 +26,7 @@
 MINI_OP(OP_LOCALLOC_IMM, "localloc_imm", IREG, NONE, NONE)
 MINI_OP(OP_CHECK_THIS,	"checkthis", NONE, IREG, NONE)
 MINI_OP(OP_SEQ_POINT, "seq_point", NONE, NONE, NONE)
+MINI_OP(OP_SAFE_POINT,		"safe_point", NONE, NONE, NONE)
 MINI_OP(OP_IMPLICIT_EXCEPTION, "implicit_exception", NONE, NONE, NONE)
 
 MINI_OP(OP_VOIDCALL,	"voidcall", NONE, NONE, NONE)
Index: mono/mini/cpu-amd64.md
===================================================================
--- mono/mini/cpu-amd64.md	(revision 158880)
+++ mono/mini/cpu-amd64.md	(working copy)
@@ -59,6 +59,7 @@
 br: len:6
 label: len:0
 seq_point: len:25
+safe_point: len:0
 
 long_add: dest:i src1:i src2:i len:3 clob:1
 long_sub: dest:i src1:i src2:i len:3 clob:1
Index: mono/mini/mini-gc.c
===================================================================
--- mono/mini/mini-gc.c	(revision 158880)
+++ mono/mini/mini-gc.c	(working copy)
@@ -3,606 +3,306 @@
  *
  * Author:
  *   Zoltan Varga (vargaz@gmail.com)
+ *   Sanjoy Das (sanjoy@playingwithpointers.com)
  *
  * Copyright 2009 Novell, Inc (http://www.novell.com)
  */
 
 #include "config.h"
 #include "mini-gc.h"
+#include "mini.h"
 
-#if 0
-//#ifdef HAVE_SGEN_GC
-
 #include <mono/metadata/gc-internal.h>
-#include <mono/utils/mono-counters.h>
+#include <mono/metadata/sgen-archdep.h>
 
-#define ALIGN_TO(val,align) ((((guint64)val) + ((align) - 1)) & ~((align) - 1))
+#define SAFE_POINTS_STATS
 
-#if 1
-#define DEBUG(s) do { s; } while (0)
-#else
-#define DEBUG(s)
-#endif
+#ifdef MONO_GC_SAFE_POINTS
 
-#if 1
-#define DEBUG_GC_MAP(s) do { s; fflush (stdout); } while (0)
-#else
-#define DEBUG_GC_MAP(s)
-#endif
+typedef struct StackFrameMap {
+	GCStackMap *map;
+	struct StackFrameMap *next;
+} StackFrameMap;
 
-#define GC_BITS_PER_WORD (sizeof (gsize) * 8)
-
-/*
- * Per-thread data kept by this module. This is stored in the GC and passed to us as
- * parameters, instead of being stored in a TLS variable, since during a collection,
- * only the collection thread is active.
- */
 typedef struct {
-	MonoLMF *lmf;
-	MonoContext ctx;
-	gboolean has_context;
-	MonoJitTlsData *jit_tls;
-} TlsData;
+	/* Contains the maps for the stack frames of the methods currently on this thread's stack. */
+	StackFrameMap *root;
 
-typedef enum {
-	/* Stack slot doesn't contain a reference */
-	SLOT_NOREF = 0,
-	/* Stack slot contains a reference */
-	SLOT_REF = 1,
-	/* No info, slot needs to be scanned conservatively */
-	SLOT_PIN = 2
-} StackSlotType;
+	/* The IP of the safe point where this thread is parked at. Only valid if
+	 * thread_state == THREAD_PARKED_FORCED */
+	gpointer safe_point_ip;
 
-/* 
- * Contains information needed to mark a stack frame.
- * FIXME: Optimize the memory usage.
- */
-typedef struct {
-	/* The frame pointer register */
-	int frame_reg;
-	/* The offset of the local variable area in the stack frame relative to the frame pointer */
-	int locals_offset;
-	/* The size of the locals area. Can't use nslots as it includes padding */
-	int locals_size;
-	/* The number of stack slots */
-	int nslots;
-	/* 
-	 * The gc map itself.
-	 */
-	StackSlotType *slots;
-	/* A pair of low pc offset-high pc offset for each SLOT_REF value in gc_refs */
-	guint32 live_ranges [MONO_ZERO_LEN_ARRAY];
-} GCMap;
+	/* The previous code that the safe point location had. This needs to be 
+	 * restored before resuming the thread. */
+	gpointer previous_instructions; 
 
-/* Statistics */
-static guint32 gc_maps_size;
+	/* The context of the method before the SIGSEGV. This slightly modified and restored
+	 * to resume a thread. */
+	gpointer previous_sigctx;
 
+	int thread_state;
+
+	/* The number of levels down the stack the safe point has been inserted. Not needed currently
+	 * since the SIGTRAP handler directly gets the context. Plus stack traversing without frame
+	 * pointers is not trivial anyways. */
+	int level;
+
+#ifdef SAFE_POINTS_STATS
+	int threads_stopped, threads_stopped_at_safe_points;
+#endif
+
+} TlsJitInfo;
+
+enum {
+	THREAD_RUNNING,
+	THREAD_PARKED_AT_SAFE_POINT,
+	THREAD_PARKED_FORCED
+};
+
 static gpointer
 thread_attach_func (void)
 {
-	return g_new0 (TlsData, 1);
+	return g_malloc0 (sizeof (TlsJitInfo));
 }
 
-static void
-thread_suspend_func (gpointer user_data, void *sigctx)
-{
-	TlsData *tls = user_data;
+typedef gboolean (*ForEachStackFrameFunc) (MonoJitInfo * /* Jit info */, MonoContext *, int /* counter */, gpointer /* user_data */);
 
-	tls->lmf = mono_get_lmf ();
-	if (sigctx) {
-		mono_arch_sigctx_to_monoctx (sigctx, &tls->ctx);
-		tls->has_context = TRUE;
-	} else {
-		tls->has_context = FALSE;
-	}
-	tls->jit_tls = TlsGetValue (mono_jit_tls_id);
-}
-
-static int precise_frame_count [2], precise_frame_limit = -1;
-static gboolean precise_frame_limit_inited;
-
-#define DEAD_REF ((gpointer)(gssize)0x2a2a2a2a2a2a2a2aULL)
-
 static void
-thread_mark_func (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise)
+for_each_stack_frame (gpointer sigctx, ForEachStackFrameFunc func, gpointer user_data)
 {
-	TlsData *tls = user_data;
-	MonoJitInfo *ji, res;
+	MonoDomain *domain = mono_domain_get ();
+	MonoJitTlsData *jit_tls = TlsGetValue (mono_get_jit_tls_key ());
+	MonoLMF *lmf = mono_get_lmf ();
+	MonoJitInfo *ji, rji;
 	MonoContext ctx, new_ctx;
-	MonoLMF *lmf = tls->lmf;
-	guint8 *stack_limit;
-	gboolean last = TRUE, managed;
-	GCMap *map;
-	guint8* fp, *locals_start, *locals_end;
-	int i, pc_offset;
-	int scanned = 0, scanned_precisely, scanned_conservatively;
+	int counter = 0;
+	MonoMethod *last_method = NULL;
 
-	if (mono_thread_internal_current () == NULL) {
-		if (!precise)
-			mono_gc_conservatively_scan_area (stack_start, stack_end);			
-		return;
-	}
+	ctx = mono_arch_mono_context_from_sigctx (sigctx);
 
-	/* Number of bytes scanned based on GC map data */
-	scanned = 0;
-	/* Number of bytes scanned precisely based on GC map data */
-	scanned_precisely = 0;
-	/* Number of bytes scanned conservatively based on GC map data */
-	scanned_conservatively = 0;
+	g_assert (MONO_CONTEXT_GET_IP (&ctx) == ARCH_SIGCTX_IP (sigctx));
 
-	/* FIXME: sgen-gc.c calls this multiple times for each major collection from pin_from_roots */
+	if (mono_thread_internal_current () == NULL)
+		return;
 
-	/* FIXME: Use real gc descriptors instead of bitmaps */
+	while (1) {
 
-	/* This is one past the last address which we have scanned */
-	stack_limit = stack_start;
+		ji = mono_find_jit_info (domain, jit_tls, &rji, NULL, &ctx, &new_ctx, NULL, &lmf, NULL, NULL);
+		if (!ji || ji == (gpointer)-1 || MONO_CONTEXT_GET_SP (&ctx) >= jit_tls->end_of_stack)
+			break; /* Is this where I break? */
+		
+		/* See mini-exceptions.c : ves_icall_get_frame_info for an explanation */
+		if (ji->method->wrapper_type == MONO_WRAPPER_MANAGED_TO_NATIVE && ji->method == last_method)
+			continue;
 
-	DEBUG (printf ("*** %s stack marking %p-%p ***\n", precise ? "Precise" : "Conservative", stack_start, stack_end));
+		last_method = ji->method;
 
-	if (!tls->has_context) {
-		memset (&new_ctx, 0, sizeof (ctx));
+		if (!func (ji, &ctx, counter, user_data))
+			break;
 
-		while (TRUE) {
-			memcpy (&ctx, &new_ctx, sizeof (ctx));
+		ctx = new_ctx;
+		counter++;
+	}
+}
 
-			g_assert ((guint64)stack_limit % sizeof (gpointer) == 0);
+#if 0
 
-			// FIXME: This doesn't work with appdomain transitions
-			ji = mono_find_jit_info (mono_domain_get (), tls->jit_tls, &res, NULL,
-									 &ctx, &new_ctx, NULL, &lmf, NULL, &managed);
-			if (ji == (gpointer)-1)
-				break;
+static gboolean
+iterate_safe_points_sanity (MonoJitInfo *ji, MonoContext *ctx, int counter, gpointer user_data)
+{
+	int native_ip, count = 0, i, index = -1;
+	MonoGCInfo *gc_info;
+	MonoSafePointJitInfo *safe_points;
 
-			/* The last frame can be in any state so mark conservatively */
-			if (last) {
-				last = FALSE;
-				continue;
-			}
+	gc_info = ji->gc_info;
+	safe_points = gc_info->safe_points;
 
-			/* These frames are returned by mono_find_jit_info () two times */
-			if (!managed)
-				continue;
+	native_ip = (int) MONO_CONTEXT_GET_IP (ctx) - (int)ji->code_start;
 
-			/* Scan the frame of this method */
+	for (i = 0; i < gc_info->safe_points_len; i++) {
+		if (safe_points [i].native_start <= native_ip &&
+				safe_points [i].native_end > native_ip) {
+			count++;
+			index = i;
+		}
+	}
+#ifdef SAFE_POINT_ASSERTIONS
+	/* Methods may lie only on one or zero safe points. */
+	g_assert (count < 2);
+	/* Only the topmost stack frame is allowed to not have a safe point. */
+	g_assert (counter == 0 || count == 1);
+	/* All the frames not on top must either be at an allocation site or a method call site */
+	if (index != -1)
+		g_assert (counter == 0 || (safe_points [index].reason == SAFE_POINT_IS_METHOD_CALL || safe_points [index].reason == SAFE_POINT_IS_ALLOCATION));
+#endif
+	return TRUE;
+}
 
-			/*
-			 * A frame contains the following:
-			 * - saved registers
-			 * - saved args
-			 * - locals
-			 * - spill area
-			 * - localloc-ed memory
-			 * Currently, only the locals are scanned precisely.
-			 */
-
-			map = ji->gc_info;
-
-			if (!map) {
-				DEBUG (char *fname = mono_method_full_name (ji->method, TRUE); printf ("Mark(%d): No GC map for %s\n", precise, fname); g_free (fname));
-				continue;
-			}
-
-			/*
-			 * Debugging aid to control the number of frames scanned precisely
-			 */
-			if (!precise_frame_limit_inited) {
-				if (getenv ("MONO_PRECISE_COUNT"))
-					precise_frame_limit = atoi (getenv ("MONO_PRECISE_COUNT"));
-				precise_frame_limit_inited = TRUE;
-			}
-				
-			if (precise_frame_limit != -1) {
-				if (precise_frame_count [precise] == precise_frame_limit)
-					printf ("LAST PRECISE FRAME: %s\n", mono_method_full_name (ji->method, TRUE));
-				if (precise_frame_count [precise] > precise_frame_limit)
-					continue;
-			}
-			precise_frame_count [precise] ++;
-
-#ifdef __x86_64__
-			if (map->frame_reg == AMD64_RSP)
-				fp = (guint8*)ctx.rsp;
-			else if (map->frame_reg == AMD64_RBP)
-				fp = (guint8*)ctx.rbp;
-			else
-				g_assert_not_reached ();
-#else
-			fp = NULL;
-			g_assert_not_reached ();
 #endif
 
-			locals_start = fp + map->locals_offset;
-			locals_end = locals_start + map->locals_size;
+static void
+thread_suspend_func (gpointer tls_data_prev, gpointer context)
+{
+}
 
-			pc_offset = (guint8*)MONO_CONTEXT_GET_IP (&ctx) - (guint8*)ji->code_start;
-			g_assert (pc_offset >= 0);
+typedef struct {
+	gpointer ip;
+	int level;
+} SafePointIPData;
 
-			DEBUG (char *fname = mono_method_full_name (ji->method, TRUE); printf ("Mark(%d): %s+0x%x (%p) limit=%p fp=%p locals=%p-%p (%d)\n", precise, fname, pc_offset, (gpointer)MONO_CONTEXT_GET_IP (&ctx), stack_limit, fp, locals_start, locals_end, (int)(locals_end - locals_start)); g_free (fname));
+static gboolean
+iterate_find_safe_point_ip (MonoJitInfo *ji, MonoContext *ctx, int counter, gpointer user_data)
+{
+	SafePointIPData *ip_data = user_data;
+	MonoGCInfo *gc_info = ji->gc_info;
+	MonoSafePointJitInfo *safe_points = gc_info->safe_points;
+	int index = -1, i;
+	int native_ip = (int) MONO_CONTEXT_GET_IP (ctx) - (int) ji->code_start;
 
-			/* 
-			 * FIXME: Add a function to mark using a bitmap, to avoid doing a 
-			 * call for each object.
-			 */
+	if (native_ip < 0)
+		return TRUE;
 
-			scanned += locals_end - locals_start;
-
-			/* Pinning needs to be done first, then the precise scan later */
-
-			if (!precise) {
-				g_assert (locals_start >= stack_limit);
-
-				if (locals_start > stack_limit) {
-					/* This scans the previously skipped frames as well */
-					DEBUG (printf ("\tscan area %p-%p.\n", stack_limit, locals_start));
-					mono_gc_conservatively_scan_area (stack_limit, locals_start);
-				}
-
-				if (map->slots) {
-					guint8 *p;
-
-					p = locals_start;
-					for (i = 0; i < map->nslots; ++i) {
-						if (map->slots [i] == SLOT_PIN) {
-							DEBUG (printf ("\tscan slot %s0x%x(fp)=%p.\n", (guint8*)p > (guint8*)fp ? "" : "-", ABS ((int)((gssize)p - (gssize)fp)), p));
-							mono_gc_conservatively_scan_area (p, p + sizeof (gpointer));
-							scanned_conservatively += sizeof (gpointer);
-						}
-						p += sizeof (gpointer);
-					}
-				}
-
-				stack_limit = locals_end;
-			} else {
-				if (map->slots) {
-					int loffset = 0;
-
-					for (i = 0; i < map->nslots; ++i) {
-						if (map->slots [i] == SLOT_REF) {
-							MonoObject **ptr = (MonoObject**)(locals_start + (i * sizeof (gpointer)));
-							MonoObject *obj = *ptr;
-
-							if (pc_offset >= map->live_ranges [loffset] && pc_offset < map->live_ranges [loffset + 1] && obj != DEAD_REF) {
-								if (obj) {
-									DEBUG (printf ("\tref %s0x%x(fp)=%p: %p ->", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-									*ptr = mono_gc_scan_object (obj);
-									DEBUG (printf (" %p.\n", *ptr));
-								} else {
-									DEBUG (printf ("\tref %s0x%x(fp)=%p: %p.\n", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-								}
-							} else {
-								DEBUG (printf ("\tref %s0x%x(fp)=%p: dead (%p)\n", (guint8*)ptr >= (guint8*)fp ? "" : "-", ABS ((int)((gssize)ptr - (gssize)fp)), ptr, obj));
-								/*
-								 * This serves two purposes:
-								 * - fail fast if the live range is incorrect, and
-								 * the JITted code tries to access this object
-								 * - it avoids problems when a dead slot becomes live
-								 * again due to a backward branch 
-								 * (see test_0_liveness_6).
-								 */
-								*ptr = DEAD_REF;
-							}
-
-							loffset += 2;
-							scanned_precisely += sizeof (gpointer);
-						} else if (map->slots [i] == SLOT_NOREF) {
-							scanned_precisely += sizeof (gpointer);
-						}
-					}
-				}
-			}
+	for (i = 0; i < gc_info->safe_points_len; i++) {
+		if (safe_points [i].native_offset >= native_ip) {
+			index = i;
+			break;
 		}
-
-		if (stack_limit < stack_end && !precise) {
-			DEBUG (printf ("\tscan area %p-%p.\n", stack_limit, stack_end));
-			mono_gc_conservatively_scan_area (stack_limit, stack_end);
-		}
-	} else {
-		// FIXME:
-		if (!precise) {
-			DEBUG (printf ("\tno context, scan area %p-%p.\n", stack_start, stack_end));
-			mono_gc_conservatively_scan_area (stack_start, stack_end);
-		}
 	}
 
-	DEBUG (printf ("Marked %d bytes, p=%d,c=%d out of %d.\n", scanned, scanned_precisely, scanned_conservatively, (int)(stack_end - stack_start)));
 
-	//mono_gc_conservatively_scan_area (stack_start, stack_end);
-}
+	if (index == -1)
+		return TRUE;
 
-#define set_slot(slots, nslots, pos, val) do {	\
-		g_assert ((pos) < (nslots));		   \
-		(slots) [(pos)] = (val);			   \
-	} while (0)
+	ip_data->ip = safe_points [index].native_offset + ji->code_start;
+	ip_data->level = counter;
 
-void
-mini_gc_init_gc_map (MonoCompile *cfg)
-{
-	if (COMPILE_LLVM (cfg))
-		return;
-
-	/* See mini_gc_create_gc_map () for comments as to why these are needed */
-
-	/* Extend the live ranges using the liveness information */
-	cfg->compute_precise_live_ranges = TRUE;
-	/* Is this still needed ? */
-	cfg->disable_reuse_ref_stack_slots = TRUE;
-	/* 
-	 * Initialize all variables holding refs to null in the initlocals bblock, not just
-	 *  variables representing IL locals.
-	 */
-	cfg->init_ref_vars = TRUE;
-	/* Prevent these initializations from being optimized away */
-	cfg->disable_initlocals_opt_refs = TRUE;
+	return FALSE;
 }
 
-void
-mini_gc_create_gc_map (MonoCompile *cfg)
+static gboolean
+thread_prepare_park_func (gpointer user_data, gpointer context)
 {
-	GCMap *map;
-	int i, nslots, alloc_size, loffset, min_offset, max_offset;
-	StackSlotType *slots = NULL;
-	gboolean norefs = FALSE;
-	guint32 *live_range_start, *live_range_end;
+	SafePointIPData ip_data = {0};
+	MonoDomain *domain = mono_domain_get ();
+	TlsJitInfo *tls = user_data;
+	tls->thread_state = THREAD_RUNNING;
 
-	/*
-	 * Since we currently don't use GC safe points, we need to create GC maps which
-	 * are precise at every instruction within a method. We use the live ranges
-	 * calculated by the JIT in mono_spill_global_vars () for this. Unfortunately by 
-	 * default these are not precise enought for several reasons:
-	 * - the current calculation of MonoMethodVar->live_range_start/end is incorrect,
-	 * it doesn't take into account loops etc. It needs to use the results of the
-	 * liveness analysis pass.
-	 * - the current liveness analysis pass is too conservative, ie. the live_in/out
-	 * sets computed by it are sometimes include too many variables, for example because
-	 * of the bogus links between bblocks. This means the live_in/out sets cannot be
-	 * used to reliably compute precise live ranges.
-	 * - stack slots are shared, which means the live ranges of stack slots have holes
-	 * in them.
-	 * - the live ranges of variables used in out-of-line bblocks also have holes in
-	 * them.
-	 * - the live ranges of variables used for handling stack args also have holes in
-	 * them:
-	 *   if (A)
-     *     x = <ref>
-	 *   else
-	 *     x = <ref>
-	 *   <use x>
-	 * Here x is not live between the first and the second assignment.
-	 *
-	 * To work around these problems, we set a few cfg flags in mini_init_gc_maps ()
-	 * which guarantee that the live range of stack slots have no holes, i.e. they hold
-	 * a valid value (or null) during their entire live range.
-	 * FIXME: This doesn't completely work yet, see test_0_liveness_6 (), where
-	 * a variable becomes dead, then alive again.
-	 */
-	//NOT_IMPLEMENTED;
+	if (mono_jit_info_table_find (domain, ARCH_SIGCTX_IP (context)) == NULL) {
+		tls->thread_state = THREAD_PARKED_FORCED;
+#ifdef SAFE_POINTS_STATS
+		tls->threads_stopped++;
+#endif
+		return TRUE;
+	}
 
-	if (!(cfg->comp_done & MONO_COMP_LIVENESS))
-		/* Without liveness info, the live ranges are not precise enough */
-		return;
+	for_each_stack_frame (context, iterate_find_safe_point_ip, &ip_data);
 
-#ifdef TARGET_AMD64
-	min_offset = ALIGN_TO (cfg->locals_min_stack_offset, sizeof (gpointer));
-	max_offset = cfg->locals_max_stack_offset;
-#else
-	/* min/max stack offset needs to be computed in mono_arch_allocate_vars () */
-	NOT_IMPLEMENTED;
+	if (!ip_data.ip) {
+		tls->thread_state = THREAD_PARKED_FORCED;
+#ifdef SAFE_POINTS_STATS
+		tls->threads_stopped++;
 #endif
+		return TRUE;
+	}
 
-	for (i = cfg->locals_start; i < cfg->num_varinfo; i++) {
-		MonoInst *ins = cfg->varinfo [i];
-		MonoType *t = ins->inst_vtype;
+	tls->thread_state = THREAD_PARKED_AT_SAFE_POINT;
+	tls->safe_point_ip = ip_data.ip;
+	tls->previous_instructions = mono_arch_emit_safe_point (ip_data.ip);
+	tls->previous_sigctx = context;
 
-		if ((MONO_TYPE_ISSTRUCT (t) && ins->klass->has_references))
-			break;
-		if (MONO_TYPE_ISSTRUCT (t))
-			break;
-		if (t->byref || t->type == MONO_TYPE_PTR)
-			break;
-		if (ins && ins->opcode == OP_REGOFFSET && MONO_TYPE_IS_REFERENCE (ins->inst_vtype))
-			break;
-	}
+#ifdef SAFE_POINTS_STATS
+	tls->threads_stopped++;
+	tls->threads_stopped_at_safe_points++;
+#endif
 
-	if (i == cfg->num_varinfo)
-		norefs = TRUE;
+	return FALSE;
+}
 
-	if (cfg->verbose_level > 1)
-		printf ("GC Map for %s: 0x%x-0x%x\n", mono_method_full_name (cfg->method, TRUE), min_offset, max_offset);
+static void
+thread_resume_prepare_func (gpointer user_data)
+{
+	TlsJitInfo *info = user_data;
 
-	nslots = (max_offset - min_offset) / sizeof (gpointer);
-	if (!norefs) {
-		alloc_size = nslots * sizeof (StackSlotType);
-		slots = mono_domain_alloc0 (cfg->domain, alloc_size);
-		for (i = 0; i < nslots; ++i)
-			slots [i] = SLOT_NOREF;
-		gc_maps_size += alloc_size;
+	if (info->thread_state == THREAD_RUNNING) {
+		info->previous_sigctx = NULL;
+		return;
 	}
-	live_range_start = g_new (guint32, nslots);
-	live_range_end = g_new (guint32, nslots);
-	loffset = 0;
 
-	for (i = 0; i < nslots; ++i) {
-		live_range_start [i] = (guint32)-1;
-		live_range_end [i] = 0;
+	if (info->thread_state == THREAD_PARKED_AT_SAFE_POINT) {
+		mono_arch_clear_safe_point (info->safe_point_ip, info->previous_instructions);
 	}
 
-	for (i = cfg->locals_start; i < cfg->num_varinfo; i++) {
-		MonoInst *ins = cfg->varinfo [i];
-		MonoType *t = ins->inst_vtype;
-		MonoMethodVar *vmv;
-		guint32 pos;
+	info->thread_state = THREAD_RUNNING;
+	info->previous_sigctx = NULL;
+}
 
-		if (norefs)
-			continue;
+static void
+thread_resume_func (gpointer user_data)
+{
+	/* Not needed now, might be needed later. */
+}
 
-		vmv = MONO_VARINFO (cfg, i);
+static void
+thread_mark_func (gpointer user_data, guint8 *stack_start, guint8 *stack_end, gboolean precise)
+{
+}
 
-		if (ins->opcode != OP_REGOFFSET)
-			continue;
+#endif
 
-		if (ins->inst_offset % sizeof (gpointer) != 0)
-			continue;
+static void
+int_3_handler (int sig, siginfo_t *siginfo, void *context)
+{
+	mono_arch_patch_safe_point_context (context);
+	mono_gc_thread_ready_to_suspend (context);
+}
 
-		pos = (ins->inst_offset - min_offset) / sizeof (gpointer);
+static struct sigaction prev_sigaction_info;
 
-		if ((MONO_TYPE_ISSTRUCT (t) && !ins->klass->has_references))
-			continue;
-
-		if ((MONO_TYPE_ISSTRUCT (t) && ins->klass->has_references)) {
-			int numbits, j;
-			gsize *bitmap;
-			gboolean pin;
-
-			if (ins->klass->generic_container || mono_class_is_open_constructed_type (t)) {
-				/* FIXME: Generic sharing */
-				pin = TRUE;
-			} else {
-				mono_class_compute_gc_descriptor (ins->klass);
-
-				bitmap = mono_gc_get_bitmap_for_descr (ins->klass->gc_descr, &numbits);
-
-				if (bitmap) {
-					for (j = 0; j < numbits; ++j) {
-						if (bitmap [j / GC_BITS_PER_WORD] & ((gsize)1 << (j % GC_BITS_PER_WORD))) {
-							/* The descriptor is for the boxed object */
-							set_slot (slots, nslots, (pos + j - (sizeof (MonoObject) / sizeof (gpointer))), SLOT_REF);
-						}
-					}
-					g_free (bitmap);
-
-					if (cfg->verbose_level > 1)
-						printf ("\tvtype at fp+0x%x: %s -> 0x%x\n", (int)ins->inst_offset, mono_type_full_name (ins->inst_vtype), (int)ins->inst_offset);
-
-					// FIXME: These have no live range
-					pin = TRUE;
-				} else {
-					// FIXME:
-					pin = TRUE;
-				}
-			}
-
-			if (ins->backend.is_pinvoke)
-				pin = TRUE;
-
-			if (pin) {
-				int size;
-
-				if (ins->backend.is_pinvoke)
-					size = mono_class_native_size (ins->klass, NULL);
-				else
-					size = mono_class_value_size (ins->klass, NULL);
-				for (j = 0; j < size / sizeof (gpointer); ++j)
-					set_slot (slots, nslots, pos + j, SLOT_PIN);
-			}
-			continue;
-		}
-
-		if (ins->inst_offset < min_offset || ins->inst_offset >= max_offset)
-			/* Vret addr etc. */
-			continue;
-
-		if (t->byref || t->type == MONO_TYPE_PTR || t->type == MONO_TYPE_I || t->type == MONO_TYPE_U) {
-			set_slot (slots, nslots, pos, SLOT_PIN);
-			continue;
-		}
-
-		if (MONO_TYPE_IS_REFERENCE (ins->inst_vtype)) {
-			if (vmv && !vmv->live_range_start) {
-				set_slot (slots, nslots, pos, SLOT_PIN);
-				continue;
-			}
-
-			if (ins->flags & (MONO_INST_VOLATILE | MONO_INST_INDIRECT)) {
-				set_slot (slots, nslots, pos, SLOT_PIN);
-				continue;
-			}
-
-			set_slot (slots, nslots, pos, SLOT_REF);
-
-			/* Stack slots holding refs shouldn't be shared */
-			g_assert (!live_range_end [pos]);
-			live_range_start [pos] = vmv->live_range_start;
-			live_range_end [pos] = vmv->live_range_end;
-
-			if (cfg->verbose_level > 1)
-				printf ("\tref at %s0x%x(fp) (slot=%d): %s [0x%x - 0x%x]\n", ins->inst_offset < 0 ? "-" : "", (ins->inst_offset < 0) ? -(int)ins->inst_offset : (int)ins->inst_offset, pos, mono_type_full_name (ins->inst_vtype), vmv->live_range_start, vmv->live_range_end);
-		}
+static void
+thread_initiate_parking (gpointer user_data)
+{
+	struct sigaction sinfo;
+	sigfillset (&sinfo.sa_mask);
+	sinfo.sa_flags = SA_RESTART | SA_SIGINFO;
+	sinfo.sa_sigaction = int_3_handler;
+	if (sigaction (SIGTRAP, &sinfo, &prev_sigaction_info) != 0) {
+		g_error ("failed sigaction to set int_3_handler");
 	}
-
-	alloc_size = sizeof (GCMap) + (norefs ? 0 : (nslots - MONO_ZERO_LEN_ARRAY) * sizeof (guint32) * 2);
-	map = mono_domain_alloc0 (cfg->domain, alloc_size);
-	gc_maps_size += alloc_size;
-
-	map->frame_reg = cfg->frame_reg;
-	map->locals_offset = min_offset;
-	map->locals_size = ALIGN_TO (max_offset - min_offset, sizeof (gpointer));
-	map->nslots = nslots;
-	map->slots = slots;
-	loffset = 0;
-	if (!norefs) {
-		for (i = 0; i < nslots; ++i) {
-			if (map->slots [i] == SLOT_REF) {
-				map->live_ranges [loffset ++] = live_range_start [i];
-				map->live_ranges [loffset ++] = live_range_end [i];
-			}
-		}
-	}
-
-#if 1
+#ifdef SAFE_POINTS_STATS
 	{
-		static int precise_count;
-
-		if (map->slots) {
-			precise_count ++;
-			if (getenv ("MONO_GCMAP_COUNT")) {
-				if (precise_count == atoi (getenv ("MONO_GCMAP_COUNT")))
-					printf ("LAST: %s\n", mono_method_full_name (cfg->method, TRUE));
-				if (precise_count > atoi (getenv ("MONO_GCMAP_COUNT"))) {
-					for (i = 0; i < nslots; ++i)
-						map->slots [i] = SLOT_PIN;
-				}
-			}
-		}
+		TlsJitInfo *info = user_data;
+		fprintf (stderr, "Efficiency %d / %d\n", info->threads_stopped_at_safe_points, info->threads_stopped);
+		info->threads_stopped_at_safe_points = info->threads_stopped = 0;
 	}
 #endif
+}
 
-	cfg->jit_info->gc_info = map;
-
-	g_free (live_range_start);
-	g_free (live_range_end);
+static void
+thread_dissolve_parking (gpointer user_data)
+{
+	if (sigaction (SIGTRAP, &prev_sigaction_info, NULL) != 0) {
+		g_error ("failed sigaction to unset int_3_handler");
+	}
 }
 
+
 void
 mini_gc_init (void)
 {
 	MonoGCCallbacks cb;
-
 	memset (&cb, 0, sizeof (cb));
+
+#ifdef MONO_GC_SAFE_POINTS
 	cb.thread_attach_func = thread_attach_func;
 	cb.thread_suspend_func = thread_suspend_func;
-	/* Comment this out to disable precise stack marking */
 	cb.thread_mark_func = thread_mark_func;
-	mono_gc_set_gc_callbacks (&cb);
+	cb.thread_prepare_park_func = thread_prepare_park_func;
+	cb.thread_resume_prepare_func = thread_resume_prepare_func;
+	cb.thread_resume_func = thread_resume_func;
+	cb.thread_initiate_parking = thread_initiate_parking;
+	cb.thread_dissolve_parking = thread_dissolve_parking;
+#endif
 
-	mono_counters_register ("GC Maps size",
-							MONO_COUNTER_GC | MONO_COUNTER_INT, &gc_maps_size);
+	mono_gc_set_gc_callbacks (&cb);
 }
 
-#else
-
-void
-mini_gc_init (void)
-{
-}
-
-void
-mini_gc_init_gc_map (MonoCompile *cfg)
-{
-}
-
-void
-mini_gc_create_gc_map (MonoCompile *cfg)
-{
-}
-
-#endif
Index: mono/mini/mini-gc.h
===================================================================
--- mono/mini/mini-gc.h	(revision 158880)
+++ mono/mini/mini-gc.h	(working copy)
@@ -5,8 +5,4 @@
 
 void mini_gc_init (void) MONO_INTERNAL;
 
-void mini_gc_init_gc_map (MonoCompile *cfg) MONO_INTERNAL;
-
-void mini_gc_create_gc_map (MonoCompile *cfg) MONO_INTERNAL;
-
 #endif
Index: mono/mini/driver.c
===================================================================
--- mono/mini/driver.c	(revision 158880)
+++ mono/mini/driver.c	(working copy)
@@ -56,6 +56,7 @@
 #include <locale.h>
 #include "version.h"
 #include "debugger-agent.h"
+#include "mini-gc.h"
 
 static FILE *mini_stats_fd = NULL;
 
@@ -1638,6 +1639,9 @@
 	}
 #endif
 
+	/* This needs to be called before mono_gc_base_init
+	 */
+	mini_gc_init ();
 	/*
 	 * This must be called before mono_debug_init(), because the
 	 * latter registers GC roots.
Index: mono/arch/x86/x86-codegen.h
===================================================================
--- mono/arch/x86/x86-codegen.h	(revision 158880)
+++ mono/arch/x86/x86-codegen.h	(working copy)
@@ -2049,6 +2049,12 @@
 	} while (0)
 
 
+#define x86_int_3(inst) \
+	do { \
+		*(inst)++ = (unsigned char) 0xCC; \
+	} while (0)
 
+#define INT_3_INSTRUCTION_BYTE (0xCC)
+
 #endif // X86_H
 
